<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="822" onload="init(evt)" viewBox="0 0 1200 822" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="822" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="805.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="805.00"> </text><svg id="frames" x="10" width="1180" total_samples="162654"><g><title>libsystem_platform.dylib`_platform_memmove (19 samples, 0.01%)</title><rect x="0.0006%" y="757" width="0.0117%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="19"/><text x="0.2506%" y="767.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (771 samples, 0.47%)</title><rect x="0.0283%" y="661" width="0.4740%" height="15" fill="rgb(217,0,24)" fg:x="46" fg:w="771"/><text x="0.2783%" y="671.50"></text></g><g><title>little-squid-cli`DYLD-STUB$$memcmp (37 samples, 0.02%)</title><rect x="0.5121%" y="661" width="0.0227%" height="15" fill="rgb(221,193,54)" fg:x="833" fg:w="37"/><text x="0.7621%" y="671.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (151 samples, 0.09%)</title><rect x="0.7703%" y="645" width="0.0928%" height="15" fill="rgb(248,212,6)" fg:x="1253" fg:w="151"/><text x="1.0203%" y="655.50"></text></g><g><title>little-squid-cli`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (668 samples, 0.41%)</title><rect x="0.8638%" y="645" width="0.4107%" height="15" fill="rgb(208,68,35)" fg:x="1405" fg:w="668"/><text x="1.1138%" y="655.50"></text></g><g><title>little-squid-cli`&lt;str as serde_json::value::index::Index&gt;::index_into (420 samples, 0.26%)</title><rect x="1.2763%" y="645" width="0.2582%" height="15" fill="rgb(232,128,0)" fg:x="2076" fg:w="420"/><text x="1.5263%" y="655.50"></text></g><g><title>little-squid-cli`DYLD-STUB$$memcmp (17 samples, 0.01%)</title><rect x="1.5345%" y="645" width="0.0105%" height="15" fill="rgb(207,160,47)" fg:x="2496" fg:w="17"/><text x="1.7845%" y="655.50"></text></g><g><title>little-squid-cli`core::hash::BuildHasher::hash_one (394 samples, 0.24%)</title><rect x="1.5450%" y="645" width="0.2422%" height="15" fill="rgb(228,23,34)" fg:x="2513" fg:w="394"/><text x="1.7950%" y="655.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (30 samples, 0.02%)</title><rect x="1.8118%" y="629" width="0.0184%" height="15" fill="rgb(218,30,26)" fg:x="2947" fg:w="30"/><text x="2.0618%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`free (103 samples, 0.06%)</title><rect x="1.8303%" y="629" width="0.0633%" height="15" fill="rgb(220,122,19)" fg:x="2977" fg:w="103"/><text x="2.0803%" y="639.50"></text></g><g><title>little-squid-cli`DYLD-STUB$$free (23 samples, 0.01%)</title><rect x="1.8936%" y="629" width="0.0141%" height="15" fill="rgb(250,228,42)" fg:x="3080" fg:w="23"/><text x="2.1436%" y="639.50"></text></g><g><title>little-squid-cli`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (44 samples, 0.03%)</title><rect x="1.9083%" y="629" width="0.0271%" height="15" fill="rgb(240,193,28)" fg:x="3104" fg:w="44"/><text x="2.1583%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (345 samples, 0.21%)</title><rect x="1.9668%" y="613" width="0.2121%" height="15" fill="rgb(216,20,37)" fg:x="3199" fg:w="345"/><text x="2.2168%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (34 samples, 0.02%)</title><rect x="2.1789%" y="613" width="0.0209%" height="15" fill="rgb(206,188,39)" fg:x="3544" fg:w="34"/><text x="2.4289%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`free (283 samples, 0.17%)</title><rect x="2.1998%" y="613" width="0.1740%" height="15" fill="rgb(217,207,13)" fg:x="3578" fg:w="283"/><text x="2.4498%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (17 samples, 0.01%)</title><rect x="2.3738%" y="613" width="0.0105%" height="15" fill="rgb(231,73,38)" fg:x="3861" fg:w="17"/><text x="2.6238%" y="623.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (20 samples, 0.01%)</title><rect x="2.3842%" y="597" width="0.0123%" height="15" fill="rgb(225,20,46)" fg:x="3878" fg:w="20"/><text x="2.6342%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (92 samples, 0.06%)</title><rect x="2.3842%" y="613" width="0.0566%" height="15" fill="rgb(210,31,41)" fg:x="3878" fg:w="92"/><text x="2.6342%" y="623.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (72 samples, 0.04%)</title><rect x="2.3965%" y="597" width="0.0443%" height="15" fill="rgb(221,200,47)" fg:x="3898" fg:w="72"/><text x="2.6465%" y="607.50"></text></g><g><title>libsystem_kernel.dylib`madvise (72 samples, 0.04%)</title><rect x="2.3965%" y="581" width="0.0443%" height="15" fill="rgb(226,26,5)" fg:x="3898" fg:w="72"/><text x="2.6465%" y="591.50"></text></g><g><title>little-squid-cli`DYLD-STUB$$free (88 samples, 0.05%)</title><rect x="2.4611%" y="613" width="0.0541%" height="15" fill="rgb(249,33,26)" fg:x="4003" fg:w="88"/><text x="2.7111%" y="623.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wake (539 samples, 0.33%)</title><rect x="2.6191%" y="597" width="0.3314%" height="15" fill="rgb(235,183,28)" fg:x="4260" fg:w="539"/><text x="2.8691%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (23 samples, 0.01%)</title><rect x="2.9627%" y="597" width="0.0141%" height="15" fill="rgb(221,5,38)" fg:x="4819" fg:w="23"/><text x="3.2127%" y="607.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (441 samples, 0.27%)</title><rect x="3.2830%" y="581" width="0.2711%" height="15" fill="rgb(247,18,42)" fg:x="5340" fg:w="441"/><text x="3.5330%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (20 samples, 0.01%)</title><rect x="3.5542%" y="581" width="0.0123%" height="15" fill="rgb(241,131,45)" fg:x="5781" fg:w="20"/><text x="3.8042%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (40 samples, 0.02%)</title><rect x="3.7011%" y="565" width="0.0246%" height="15" fill="rgb(249,31,29)" fg:x="6020" fg:w="40"/><text x="3.9511%" y="575.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (40 samples, 0.02%)</title><rect x="3.7011%" y="549" width="0.0246%" height="15" fill="rgb(225,111,53)" fg:x="6020" fg:w="40"/><text x="3.9511%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (159 samples, 0.10%)</title><rect x="3.7343%" y="565" width="0.0978%" height="15" fill="rgb(238,160,17)" fg:x="6074" fg:w="159"/><text x="3.9843%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (196 samples, 0.12%)</title><rect x="3.8321%" y="565" width="0.1205%" height="15" fill="rgb(214,148,48)" fg:x="6233" fg:w="196"/><text x="4.0821%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (36 samples, 0.02%)</title><rect x="3.9550%" y="565" width="0.0221%" height="15" fill="rgb(232,36,49)" fg:x="6433" fg:w="36"/><text x="4.2050%" y="575.50"></text></g><g><title>libsystem_kernel.dylib`madvise (30 samples, 0.02%)</title><rect x="3.9587%" y="549" width="0.0184%" height="15" fill="rgb(209,103,24)" fg:x="6439" fg:w="30"/><text x="4.2087%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (814 samples, 0.50%)</title><rect x="3.5708%" y="581" width="0.5004%" height="15" fill="rgb(229,88,8)" fg:x="5808" fg:w="814"/><text x="3.8208%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (152 samples, 0.09%)</title><rect x="3.9778%" y="565" width="0.0934%" height="15" fill="rgb(213,181,19)" fg:x="6470" fg:w="152"/><text x="4.2278%" y="575.50"></text></g><g><title>libsystem_kernel.dylib`madvise (144 samples, 0.09%)</title><rect x="3.9827%" y="549" width="0.0885%" height="15" fill="rgb(254,191,54)" fg:x="6478" fg:w="144"/><text x="4.2327%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1,924 samples, 1.18%)</title><rect x="2.9769%" y="597" width="1.1829%" height="15" fill="rgb(241,83,37)" fg:x="4842" fg:w="1924"/><text x="3.2269%" y="607.50"></text></g><g><title>libsystem_platform.dylib`_os_unfair_lock_lock_slow (144 samples, 0.09%)</title><rect x="4.0712%" y="581" width="0.0885%" height="15" fill="rgb(233,36,39)" fg:x="6622" fg:w="144"/><text x="4.3212%" y="591.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (187 samples, 0.11%)</title><rect x="4.1714%" y="597" width="0.1150%" height="15" fill="rgb(226,3,54)" fg:x="6785" fg:w="187"/><text x="4.4214%" y="607.50"></text></g><g><title>little-squid-cli`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2,889 samples, 1.78%)</title><rect x="2.5213%" y="613" width="1.7762%" height="15" fill="rgb(245,192,40)" fg:x="4101" fg:w="2889"/><text x="2.7713%" y="623.50">l..</text></g><g><title>libsystem_platform.dylib`os_unfair_lock_lock_with_options (18 samples, 0.01%)</title><rect x="4.2864%" y="597" width="0.0111%" height="15" fill="rgb(238,167,29)" fg:x="6972" fg:w="18"/><text x="4.5364%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (703 samples, 0.43%)</title><rect x="4.3768%" y="597" width="0.4322%" height="15" fill="rgb(232,182,51)" fg:x="7119" fg:w="703"/><text x="4.6268%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`free (46 samples, 0.03%)</title><rect x="4.8182%" y="597" width="0.0283%" height="15" fill="rgb(231,60,39)" fg:x="7837" fg:w="46"/><text x="5.0682%" y="607.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (73 samples, 0.04%)</title><rect x="4.8532%" y="581" width="0.0449%" height="15" fill="rgb(208,69,12)" fg:x="7894" fg:w="73"/><text x="5.1032%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (516 samples, 0.32%)</title><rect x="4.8981%" y="581" width="0.3172%" height="15" fill="rgb(235,93,37)" fg:x="7967" fg:w="516"/><text x="5.1481%" y="591.50"></text></g><g><title>libsystem_kernel.dylib`madvise (516 samples, 0.32%)</title><rect x="4.8981%" y="565" width="0.3172%" height="15" fill="rgb(213,116,39)" fg:x="7967" fg:w="516"/><text x="5.1481%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (592 samples, 0.36%)</title><rect x="4.8520%" y="597" width="0.3640%" height="15" fill="rgb(222,207,29)" fg:x="7892" fg:w="592"/><text x="5.1020%" y="607.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wake (142 samples, 0.09%)</title><rect x="5.5277%" y="581" width="0.0873%" height="15" fill="rgb(206,96,30)" fg:x="8991" fg:w="142"/><text x="5.7777%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (44 samples, 0.03%)</title><rect x="5.6291%" y="581" width="0.0271%" height="15" fill="rgb(218,138,4)" fg:x="9156" fg:w="44"/><text x="5.8791%" y="591.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (445 samples, 0.27%)</title><rect x="5.8867%" y="565" width="0.2736%" height="15" fill="rgb(250,191,14)" fg:x="9575" fg:w="445"/><text x="6.1367%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (27 samples, 0.02%)</title><rect x="6.1603%" y="565" width="0.0166%" height="15" fill="rgb(239,60,40)" fg:x="10020" fg:w="27"/><text x="6.4103%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (126 samples, 0.08%)</title><rect x="6.2839%" y="549" width="0.0775%" height="15" fill="rgb(206,27,48)" fg:x="10221" fg:w="126"/><text x="6.5339%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (43 samples, 0.03%)</title><rect x="6.3700%" y="549" width="0.0264%" height="15" fill="rgb(225,35,8)" fg:x="10361" fg:w="43"/><text x="6.6200%" y="559.50"></text></g><g><title>libsystem_kernel.dylib`madvise (32 samples, 0.02%)</title><rect x="6.3767%" y="533" width="0.0197%" height="15" fill="rgb(250,213,24)" fg:x="10372" fg:w="32"/><text x="6.6267%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (357 samples, 0.22%)</title><rect x="6.1806%" y="565" width="0.2195%" height="15" fill="rgb(247,123,22)" fg:x="10053" fg:w="357"/><text x="6.4306%" y="575.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1,352 samples, 0.83%)</title><rect x="5.6562%" y="581" width="0.8312%" height="15" fill="rgb(231,138,38)" fg:x="9200" fg:w="1352"/><text x="5.9062%" y="591.50"></text></g><g><title>libsystem_platform.dylib`_os_unfair_lock_lock_slow (139 samples, 0.09%)</title><rect x="6.4019%" y="565" width="0.0855%" height="15" fill="rgb(231,145,46)" fg:x="10413" fg:w="139"/><text x="6.6519%" y="575.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (116 samples, 0.07%)</title><rect x="6.4972%" y="581" width="0.0713%" height="15" fill="rgb(251,118,11)" fg:x="10568" fg:w="116"/><text x="6.7472%" y="591.50"></text></g><g><title>little-squid-cli`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2,204 samples, 1.36%)</title><rect x="5.2473%" y="597" width="1.3550%" height="15" fill="rgb(217,147,25)" fg:x="8535" fg:w="2204"/><text x="5.4973%" y="607.50"></text></g><g><title>libsystem_platform.dylib`os_unfair_lock_lock_with_options (55 samples, 0.03%)</title><rect x="6.5685%" y="581" width="0.0338%" height="15" fill="rgb(247,81,37)" fg:x="10684" fg:w="55"/><text x="6.8185%" y="591.50"></text></g><g><title>little-squid-cli`core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (7,622 samples, 4.69%)</title><rect x="1.9354%" y="629" width="4.6860%" height="15" fill="rgb(209,12,38)" fg:x="3148" fg:w="7622"/><text x="2.1854%" y="639.50">littl..</text></g><g><title>little-squid-cli`core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3,780 samples, 2.32%)</title><rect x="4.2975%" y="613" width="2.3240%" height="15" fill="rgb(227,1,9)" fg:x="6990" fg:w="3780"/><text x="4.5475%" y="623.50">l..</text></g><g><title>little-squid-cli`core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (31 samples, 0.02%)</title><rect x="6.6024%" y="597" width="0.0191%" height="15" fill="rgb(248,47,43)" fg:x="10739" fg:w="31"/><text x="6.8524%" y="607.50"></text></g><g><title>little-squid-cli`core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (7,871 samples, 4.84%)</title><rect x="1.7915%" y="645" width="4.8391%" height="15" fill="rgb(221,10,30)" fg:x="2914" fg:w="7871"/><text x="2.0415%" y="655.50">little..</text></g><g><title>libsystem_kernel.dylib`close (23 samples, 0.01%)</title><rect x="6.6319%" y="629" width="0.0141%" height="15" fill="rgb(210,229,1)" fg:x="10787" fg:w="23"/><text x="6.8819%" y="639.50"></text></g><g><title>little-squid-cli`parquet_format_safe::parquet_format::KeyValue::write_to_out_protocol (19 samples, 0.01%)</title><rect x="6.6651%" y="597" width="0.0117%" height="15" fill="rgb(222,148,37)" fg:x="10841" fg:w="19"/><text x="6.9151%" y="607.50"></text></g><g><title>little-squid-cli`parquet_format_safe::thrift::protocol::compact_write::TCompactOutputProtocol&lt;T&gt;::write_field_header (23 samples, 0.01%)</title><rect x="6.6767%" y="597" width="0.0141%" height="15" fill="rgb(234,67,33)" fg:x="10860" fg:w="23"/><text x="6.9267%" y="607.50"></text></g><g><title>libsystem_kernel.dylib`write (22 samples, 0.01%)</title><rect x="6.6774%" y="581" width="0.0135%" height="15" fill="rgb(247,98,35)" fg:x="10861" fg:w="22"/><text x="6.9274%" y="591.50"></text></g><g><title>little-squid-cli`parquet_format_safe::parquet_format::FileMetaData::write_to_out_protocol (64 samples, 0.04%)</title><rect x="6.6522%" y="613" width="0.0393%" height="15" fill="rgb(247,138,52)" fg:x="10820" fg:w="64"/><text x="6.9022%" y="623.50"></text></g><g><title>little-squid-cli`polars_parquet::parquet::write::file::FileWriter&lt;W&gt;::end (100 samples, 0.06%)</title><rect x="6.6522%" y="629" width="0.0615%" height="15" fill="rgb(213,79,30)" fg:x="10820" fg:w="100"/><text x="6.9022%" y="639.50"></text></g><g><title>little-squid-cli`std::io::Write::write_all (34 samples, 0.02%)</title><rect x="6.6927%" y="613" width="0.0209%" height="15" fill="rgb(246,177,23)" fg:x="10886" fg:w="34"/><text x="6.9427%" y="623.50"></text></g><g><title>libsystem_kernel.dylib`write (33 samples, 0.02%)</title><rect x="6.6933%" y="597" width="0.0203%" height="15" fill="rgb(230,62,27)" fg:x="10887" fg:w="33"/><text x="6.9433%" y="607.50"></text></g><g><title>little-squid-cli`polars_io::parquet::write::ParquetWriter&lt;W&gt;::finish (134 samples, 0.08%)</title><rect x="6.6319%" y="645" width="0.0824%" height="15" fill="rgb(216,154,8)" fg:x="10787" fg:w="134"/><text x="6.8819%" y="655.50"></text></g><g><title>little-squid-cli`little_squid_cli::save::write_loop (10,987 samples, 6.75%)</title><rect x="0.0271%" y="677" width="6.7548%" height="15" fill="rgb(244,35,45)" fg:x="44" fg:w="10987"/><text x="0.2771%" y="687.50">little-sq..</text></g><g><title>little-squid-cli`little_squid_cli::export::export::save_to_file (10,143 samples, 6.24%)</title><rect x="0.5459%" y="661" width="6.2359%" height="15" fill="rgb(251,115,12)" fg:x="888" fg:w="10143"/><text x="0.7959%" y="671.50">little-s..</text></g><g><title>little-squid-cli`std::fs::OpenOptions::_open (110 samples, 0.07%)</title><rect x="6.7143%" y="645" width="0.0676%" height="15" fill="rgb(240,54,50)" fg:x="10921" fg:w="110"/><text x="6.9643%" y="655.50"></text></g><g><title>little-squid-cli`std::sys::unix::fs::File::open_c (110 samples, 0.07%)</title><rect x="6.7143%" y="629" width="0.0676%" height="15" fill="rgb(233,84,52)" fg:x="10921" fg:w="110"/><text x="6.9643%" y="639.50"></text></g><g><title>libsystem_kernel.dylib`__open (110 samples, 0.07%)</title><rect x="6.7143%" y="613" width="0.0676%" height="15" fill="rgb(207,117,47)" fg:x="10921" fg:w="110"/><text x="6.9643%" y="623.50"></text></g><g><title>libsystem_info.dylib`_gai_nat64_second_pass (38 samples, 0.02%)</title><rect x="6.7843%" y="565" width="0.0234%" height="15" fill="rgb(249,43,39)" fg:x="11035" fg:w="38"/><text x="7.0343%" y="575.50"></text></g><g><title>Network`nw_nat64_v4_address_requires_synthesis (38 samples, 0.02%)</title><rect x="6.7843%" y="549" width="0.0234%" height="15" fill="rgb(209,38,44)" fg:x="11035" fg:w="38"/><text x="7.0343%" y="559.50"></text></g><g><title>Network`nw_path_create_evaluator_for_endpoint (35 samples, 0.02%)</title><rect x="6.7862%" y="533" width="0.0215%" height="15" fill="rgb(236,212,23)" fg:x="11038" fg:w="35"/><text x="7.0362%" y="543.50"></text></g><g><title>libsystem_kernel.dylib`necp_client_action (19 samples, 0.01%)</title><rect x="6.7960%" y="517" width="0.0117%" height="15" fill="rgb(242,79,21)" fg:x="11054" fg:w="19"/><text x="7.0460%" y="527.50"></text></g><g><title>libsystem_info.dylib`_mdns_query_start (34 samples, 0.02%)</title><rect x="6.8126%" y="517" width="0.0209%" height="15" fill="rgb(211,96,35)" fg:x="11081" fg:w="34"/><text x="7.0626%" y="527.50"></text></g><g><title>libsystem_dnssd.dylib`DNSServiceQueryRecordInternal (34 samples, 0.02%)</title><rect x="6.8126%" y="501" width="0.0209%" height="15" fill="rgb(253,215,40)" fg:x="11081" fg:w="34"/><text x="7.0626%" y="511.50"></text></g><g><title>libsystem_info.dylib`_mdns_search_ex (42 samples, 0.03%)</title><rect x="6.8083%" y="533" width="0.0258%" height="15" fill="rgb(211,81,21)" fg:x="11074" fg:w="42"/><text x="7.0583%" y="543.50"></text></g><g><title>little-squid-cli`&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (97 samples, 0.06%)</title><rect x="6.7843%" y="645" width="0.0596%" height="15" fill="rgb(208,190,38)" fg:x="11035" fg:w="97"/><text x="7.0343%" y="655.50"></text></g><g><title>little-squid-cli`&lt;(&amp;str,u16) as std::net::socket_addr::ToSocketAddrs&gt;::to_socket_addrs (97 samples, 0.06%)</title><rect x="6.7843%" y="629" width="0.0596%" height="15" fill="rgb(235,213,38)" fg:x="11035" fg:w="97"/><text x="7.0343%" y="639.50"></text></g><g><title>little-squid-cli`&lt;std::sys_common::net::LookupHost as core::convert::TryFrom&lt;(&amp;str,u16)&gt;&gt;::try_from::_{{closure}} (97 samples, 0.06%)</title><rect x="6.7843%" y="613" width="0.0596%" height="15" fill="rgb(237,122,38)" fg:x="11035" fg:w="97"/><text x="7.0343%" y="623.50"></text></g><g><title>libsystem_info.dylib`getaddrinfo (97 samples, 0.06%)</title><rect x="6.7843%" y="597" width="0.0596%" height="15" fill="rgb(244,218,35)" fg:x="11035" fg:w="97"/><text x="7.0343%" y="607.50"></text></g><g><title>libsystem_info.dylib`si_addrinfo (97 samples, 0.06%)</title><rect x="6.7843%" y="581" width="0.0596%" height="15" fill="rgb(240,68,47)" fg:x="11035" fg:w="97"/><text x="7.0343%" y="591.50"></text></g><g><title>libsystem_info.dylib`search_addrinfo (58 samples, 0.04%)</title><rect x="6.8083%" y="565" width="0.0357%" height="15" fill="rgb(210,16,53)" fg:x="11074" fg:w="58"/><text x="7.0583%" y="575.50"></text></g><g><title>libsystem_info.dylib`mdns_addrinfo (58 samples, 0.04%)</title><rect x="6.8083%" y="549" width="0.0357%" height="15" fill="rgb(235,124,12)" fg:x="11074" fg:w="58"/><text x="7.0583%" y="559.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (25 samples, 0.02%)</title><rect x="6.9915%" y="549" width="0.0154%" height="15" fill="rgb(224,169,11)" fg:x="11372" fg:w="25"/><text x="7.2415%" y="559.50"></text></g><g><title>libsystem_m.dylib`pow (18 samples, 0.01%)</title><rect x="7.0106%" y="549" width="0.0111%" height="15" fill="rgb(250,166,2)" fg:x="11403" fg:w="18"/><text x="7.2606%" y="559.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (102 samples, 0.06%)</title><rect x="7.0567%" y="517" width="0.0627%" height="15" fill="rgb(242,216,29)" fg:x="11478" fg:w="102"/><text x="7.3067%" y="527.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (155 samples, 0.10%)</title><rect x="7.0303%" y="533" width="0.0953%" height="15" fill="rgb(230,116,27)" fg:x="11435" fg:w="155"/><text x="7.2803%" y="543.50"></text></g><g><title>little-squid-cli`std::sys::unix::time::Timespec::now (166 samples, 0.10%)</title><rect x="7.0247%" y="549" width="0.1021%" height="15" fill="rgb(228,99,48)" fg:x="11426" fg:w="166"/><text x="7.2747%" y="559.50"></text></g><g><title>little-squid-cli`tokio::runtime::scheduler::multi_thread::queue::Steal&lt;T&gt;::steal_into (87 samples, 0.05%)</title><rect x="7.1329%" y="549" width="0.0535%" height="15" fill="rgb(253,11,6)" fg:x="11602" fg:w="87"/><text x="7.3829%" y="559.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (52 samples, 0.03%)</title><rect x="7.2116%" y="517" width="0.0320%" height="15" fill="rgb(247,143,39)" fg:x="11730" fg:w="52"/><text x="7.4616%" y="527.50"></text></g><g><title>little-squid-cli`parking_lot::condvar::Condvar::notify_one_slow (58 samples, 0.04%)</title><rect x="7.2116%" y="533" width="0.0357%" height="15" fill="rgb(236,97,10)" fg:x="11730" fg:w="58"/><text x="7.4616%" y="543.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvwait (1,904 samples, 1.17%)</title><rect x="7.3536%" y="501" width="1.1706%" height="15" fill="rgb(233,208,19)" fg:x="11961" fg:w="1904"/><text x="7.6036%" y="511.50"></text></g><g><title>libsystem_pthread.dylib`_pthread_cond_wait (81 samples, 0.05%)</title><rect x="8.5255%" y="501" width="0.0498%" height="15" fill="rgb(216,164,2)" fg:x="13867" fg:w="81"/><text x="8.7755%" y="511.50"></text></g><g><title>little-squid-cli`parking_lot::condvar::Condvar::wait_until_internal (2,058 samples, 1.27%)</title><rect x="7.3192%" y="517" width="1.2653%" height="15" fill="rgb(220,129,5)" fg:x="11905" fg:w="2058"/><text x="7.5692%" y="527.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (38 samples, 0.02%)</title><rect x="8.6515%" y="469" width="0.0234%" height="15" fill="rgb(242,17,10)" fg:x="14072" fg:w="38"/><text x="8.9015%" y="479.50"></text></g><g><title>little-squid-cli`std::sys::unix::time::Timespec::now (90 samples, 0.06%)</title><rect x="8.6238%" y="501" width="0.0553%" height="15" fill="rgb(242,107,0)" fg:x="14027" fg:w="90"/><text x="8.8738%" y="511.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (86 samples, 0.05%)</title><rect x="8.6263%" y="485" width="0.0529%" height="15" fill="rgb(251,28,31)" fg:x="14031" fg:w="86"/><text x="8.8763%" y="495.50"></text></g><g><title>little-squid-cli`tokio::process::imp::orphan::OrphanQueueImpl&lt;T&gt;::reap_orphans (17 samples, 0.01%)</title><rect x="8.6835%" y="501" width="0.0105%" height="15" fill="rgb(233,223,10)" fg:x="14124" fg:w="17"/><text x="8.9335%" y="511.50"></text></g><g><title>libsystem_kernel.dylib`kevent (2,401 samples, 1.48%)</title><rect x="8.7117%" y="485" width="1.4761%" height="15" fill="rgb(215,21,27)" fg:x="14170" fg:w="2401"/><text x="8.9617%" y="495.50"></text></g><g><title>little-squid-cli`mio::poll::Poll::poll (21 samples, 0.01%)</title><rect x="10.1897%" y="485" width="0.0129%" height="15" fill="rgb(232,23,21)" fg:x="16574" fg:w="21"/><text x="10.4397%" y="495.50"></text></g><g><title>little-squid-cli`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (24 samples, 0.01%)</title><rect x="10.2248%" y="453" width="0.0148%" height="15" fill="rgb(244,5,23)" fg:x="16631" fg:w="24"/><text x="10.4748%" y="463.50"></text></g><g><title>little-squid-cli`tokio::runtime::io::scheduled_io::ScheduledIo::wake (71 samples, 0.04%)</title><rect x="10.2026%" y="485" width="0.0437%" height="15" fill="rgb(226,81,46)" fg:x="16595" fg:w="71"/><text x="10.4526%" y="495.50"></text></g><g><title>little-squid-cli`tokio::runtime::task::waker::wake_by_val (44 samples, 0.03%)</title><rect x="10.2192%" y="469" width="0.0271%" height="15" fill="rgb(247,70,30)" fg:x="16622" fg:w="44"/><text x="10.4692%" y="479.50"></text></g><g><title>little-squid-cli`tokio::runtime::io::driver::Driver::turn (2,535 samples, 1.56%)</title><rect x="8.6939%" y="501" width="1.5585%" height="15" fill="rgb(212,68,19)" fg:x="14141" fg:w="2535"/><text x="8.9439%" y="511.50"></text></g><g><title>little-squid-cli`tokio::runtime::time::Driver::park_internal (2,706 samples, 1.66%)</title><rect x="8.5974%" y="517" width="1.6637%" height="15" fill="rgb(240,187,13)" fg:x="13984" fg:w="2706"/><text x="8.8474%" y="527.50"></text></g><g><title>little-squid-cli`core::ptr::drop_in_place&lt;[core::option::Option&lt;core::task::wake::Waker&gt; (35 samples, 0.02%)</title><rect x="10.2740%" y="501" width="0.0215%" height="15" fill="rgb(223,113,26)" fg:x="16711" fg:w="35"/><text x="10.5240%" y="511.50"></text></g><g><title> 32]&gt; (35 samples, 0.02%)</title><rect x="10.2740%" y="485" width="0.0215%" height="15" fill="rgb(206,192,2)" fg:x="16711" fg:w="35"/><text x="10.5240%" y="495.50"></text></g><g><title>little-squid-cli`tokio::runtime::time::_&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (92 samples, 0.06%)</title><rect x="10.2610%" y="517" width="0.0566%" height="15" fill="rgb(241,108,4)" fg:x="16690" fg:w="92"/><text x="10.5110%" y="527.50"></text></g><g><title>little-squid-cli`tokio::runtime::time::wheel::Wheel::poll (28 samples, 0.02%)</title><rect x="10.3004%" y="501" width="0.0172%" height="15" fill="rgb(247,173,49)" fg:x="16754" fg:w="28"/><text x="10.5504%" y="511.50"></text></g><g><title>little-squid-cli`tokio::runtime::time::wheel::Wheel::next_expiration (19 samples, 0.01%)</title><rect x="10.3059%" y="485" width="0.0117%" height="15" fill="rgb(224,114,35)" fg:x="16763" fg:w="19"/><text x="10.5559%" y="495.50"></text></g><g><title>little-squid-cli`tokio::runtime::scheduler::multi_thread::park::Parker::park (4,992 samples, 3.07%)</title><rect x="7.2504%" y="533" width="3.0691%" height="15" fill="rgb(245,159,27)" fg:x="11793" fg:w="4992"/><text x="7.5004%" y="543.50">lit..</text></g><g><title>little-squid-cli`tokio::runtime::io::driver::Driver::turn (38 samples, 0.02%)</title><rect x="10.3244%" y="517" width="0.0234%" height="15" fill="rgb(245,172,44)" fg:x="16793" fg:w="38"/><text x="10.5744%" y="527.50"></text></g><g><title>libsystem_kernel.dylib`kevent (38 samples, 0.02%)</title><rect x="10.3244%" y="501" width="0.0234%" height="15" fill="rgb(236,23,11)" fg:x="16793" fg:w="38"/><text x="10.5744%" y="511.50"></text></g><g><title>little-squid-cli`tokio::runtime::time::Driver::park_internal (47 samples, 0.03%)</title><rect x="10.3195%" y="533" width="0.0289%" height="15" fill="rgb(205,117,38)" fg:x="16785" fg:w="47"/><text x="10.5695%" y="543.50"></text></g><g><title>little-squid-cli`tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (5,147 samples, 3.16%)</title><rect x="7.1864%" y="549" width="3.1644%" height="15" fill="rgb(237,72,25)" fg:x="11689" fg:w="5147"/><text x="7.4364%" y="559.50">lit..</text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (309 samples, 0.19%)</title><rect x="10.4227%" y="517" width="0.1900%" height="15" fill="rgb(244,70,9)" fg:x="16953" fg:w="309"/><text x="10.6727%" y="527.50"></text></g><g><title>little-squid-cli`parking_lot::condvar::Condvar::notify_one_slow (354 samples, 0.22%)</title><rect x="10.4141%" y="533" width="0.2176%" height="15" fill="rgb(217,125,39)" fg:x="16939" fg:w="354"/><text x="10.6641%" y="543.50"></text></g><g><title>little-squid-cli`tokio::runtime::driver::Handle::unpark (134 samples, 0.08%)</title><rect x="10.6336%" y="533" width="0.0824%" height="15" fill="rgb(235,36,10)" fg:x="17296" fg:w="134"/><text x="10.8836%" y="543.50"></text></g><g><title>libsystem_kernel.dylib`kevent (133 samples, 0.08%)</title><rect x="10.6342%" y="517" width="0.0818%" height="15" fill="rgb(251,123,47)" fg:x="17297" fg:w="133"/><text x="10.8842%" y="527.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (32 samples, 0.02%)</title><rect x="10.8248%" y="501" width="0.0197%" height="15" fill="rgb(221,13,13)" fg:x="17607" fg:w="32"/><text x="11.0748%" y="511.50"></text></g><g><title>little-squid-cli`futures_channel::mpsc::BoundedSenderInner&lt;T&gt;::poll_unparked (69 samples, 0.04%)</title><rect x="11.0154%" y="437" width="0.0424%" height="15" fill="rgb(238,131,9)" fg:x="17917" fg:w="69"/><text x="11.2654%" y="447.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_unlock (26 samples, 0.02%)</title><rect x="11.0418%" y="421" width="0.0160%" height="15" fill="rgb(211,50,8)" fg:x="17960" fg:w="26"/><text x="11.2918%" y="431.50"></text></g><g><title>little-squid-cli`futures_core::task::__internal::atomic_waker::AtomicWaker::register (92 samples, 0.06%)</title><rect x="11.0578%" y="437" width="0.0566%" height="15" fill="rgb(245,182,24)" fg:x="17986" fg:w="92"/><text x="11.3078%" y="447.50"></text></g><g><title>little-squid-cli`hyper::body::body::Sender::poll_ready (199 samples, 0.12%)</title><rect x="10.9951%" y="453" width="0.1223%" height="15" fill="rgb(242,14,37)" fg:x="17884" fg:w="199"/><text x="11.2451%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (103 samples, 0.06%)</title><rect x="11.1273%" y="437" width="0.0633%" height="15" fill="rgb(246,228,12)" fg:x="18099" fg:w="103"/><text x="11.3773%" y="447.50"></text></g><g><title>little-squid-cli`tokio::runtime::context::scoped::Scoped&lt;T&gt;::with (32 samples, 0.02%)</title><rect x="11.2712%" y="389" width="0.0197%" height="15" fill="rgb(213,55,15)" fg:x="18333" fg:w="32"/><text x="11.5212%" y="399.50"></text></g><g><title>little-squid-cli`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (55 samples, 0.03%)</title><rect x="11.2662%" y="405" width="0.0338%" height="15" fill="rgb(209,9,3)" fg:x="18325" fg:w="55"/><text x="11.5162%" y="415.50"></text></g><g><title>little-squid-cli`futures_channel::mpsc::Sender&lt;T&gt;::try_send (169 samples, 0.10%)</title><rect x="11.2035%" y="437" width="0.1039%" height="15" fill="rgb(230,59,30)" fg:x="18223" fg:w="169"/><text x="11.4535%" y="447.50"></text></g><g><title>little-squid-cli`tokio::runtime::task::waker::wake_by_val (78 samples, 0.05%)</title><rect x="11.2595%" y="421" width="0.0480%" height="15" fill="rgb(209,121,21)" fg:x="18314" fg:w="78"/><text x="11.5095%" y="431.50"></text></g><g><title>little-squid-cli`hyper::body::body::Sender::try_send_data (319 samples, 0.20%)</title><rect x="11.1175%" y="453" width="0.1961%" height="15" fill="rgb(220,109,13)" fg:x="18083" fg:w="319"/><text x="11.3675%" y="463.50"></text></g><g><title>little-squid-cli`bytes::bytes_mut::BytesMut::split_to (72 samples, 0.04%)</title><rect x="11.5275%" y="405" width="0.0443%" height="15" fill="rgb(232,18,1)" fg:x="18750" fg:w="72"/><text x="11.7775%" y="415.50"></text></g><g><title>Security`SSLGetConnection (26 samples, 0.02%)</title><rect x="11.5909%" y="389" width="0.0160%" height="15" fill="rgb(215,41,42)" fg:x="18853" fg:w="26"/><text x="11.8409%" y="399.50"></text></g><g><title>libsystem_platform.dylib`__bzero (3,546 samples, 2.18%)</title><rect x="11.6136%" y="389" width="2.1801%" height="15" fill="rgb(224,123,36)" fg:x="18890" fg:w="3546"/><text x="11.8636%" y="399.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memset (35 samples, 0.02%)</title><rect x="13.7980%" y="389" width="0.0215%" height="15" fill="rgb(240,125,3)" fg:x="22443" fg:w="35"/><text x="14.0480%" y="399.50"></text></g><g><title>Security`SSLGetBufferedReadSize (18 samples, 0.01%)</title><rect x="13.8767%" y="373" width="0.0111%" height="15" fill="rgb(205,98,50)" fg:x="22571" fg:w="18"/><text x="14.1267%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (31 samples, 0.02%)</title><rect x="14.0009%" y="325" width="0.0191%" height="15" fill="rgb(205,185,37)" fg:x="22773" fg:w="31"/><text x="14.2509%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free_small (38 samples, 0.02%)</title><rect x="14.0199%" y="325" width="0.0234%" height="15" fill="rgb(238,207,15)" fg:x="22804" fg:w="38"/><text x="14.2699%" y="335.50"></text></g><g><title>Security`SSLRecordFreeInternal (98 samples, 0.06%)</title><rect x="13.9843%" y="341" width="0.0603%" height="15" fill="rgb(213,199,42)" fg:x="22746" fg:w="98"/><text x="14.2343%" y="351.50"></text></g><g><title>libcorecrypto.dylib`cc_disable_dit (152 samples, 0.09%)</title><rect x="14.1368%" y="309" width="0.0934%" height="15" fill="rgb(235,201,11)" fg:x="22994" fg:w="152"/><text x="14.3868%" y="319.50"></text></g><g><title>libcorecrypto.dylib`ccgcm_gmac (79 samples, 0.05%)</title><rect x="14.2302%" y="309" width="0.0486%" height="15" fill="rgb(207,46,11)" fg:x="23146" fg:w="79"/><text x="14.4802%" y="319.50"></text></g><g><title>libcorecrypto.dylib`ccmode_gcm_aad (28 samples, 0.02%)</title><rect x="14.2616%" y="293" width="0.0172%" height="15" fill="rgb(241,35,35)" fg:x="23197" fg:w="28"/><text x="14.5116%" y="303.50"></text></g><g><title>libcorecrypto.dylib`AccelerateCrypto_ecb_AES_encrypt (29 samples, 0.02%)</title><rect x="14.3507%" y="277" width="0.0178%" height="15" fill="rgb(243,32,47)" fg:x="23342" fg:w="29"/><text x="14.6007%" y="287.50"></text></g><g><title>libcorecrypto.dylib`aes_key_expansion (144 samples, 0.09%)</title><rect x="14.3685%" y="277" width="0.0885%" height="15" fill="rgb(247,202,23)" fg:x="23371" fg:w="144"/><text x="14.6185%" y="287.50"></text></g><g><title>libcorecrypto.dylib`cc_clear (42 samples, 0.03%)</title><rect x="14.4804%" y="245" width="0.0258%" height="15" fill="rgb(219,102,11)" fg:x="23553" fg:w="42"/><text x="14.7304%" y="255.50"></text></g><g><title>libcorecrypto.dylib`ccmode_gcm_init (75 samples, 0.05%)</title><rect x="14.4669%" y="277" width="0.0461%" height="15" fill="rgb(243,110,44)" fg:x="23531" fg:w="75"/><text x="14.7169%" y="287.50"></text></g><g><title>libcorecrypto.dylib`ccmode_gcm_reset (62 samples, 0.04%)</title><rect x="14.4749%" y="261" width="0.0381%" height="15" fill="rgb(222,74,54)" fg:x="23544" fg:w="62"/><text x="14.7249%" y="271.50"></text></g><g><title>libcorecrypto.dylib`ccgcm_init (363 samples, 0.22%)</title><rect x="14.3390%" y="293" width="0.2232%" height="15" fill="rgb(216,99,12)" fg:x="23323" fg:w="363"/><text x="14.5890%" y="303.50"></text></g><g><title>libcorecrypto.dylib`gcm_init (78 samples, 0.05%)</title><rect x="14.5142%" y="277" width="0.0480%" height="15" fill="rgb(226,22,26)" fg:x="23608" fg:w="78"/><text x="14.7642%" y="287.50"></text></g><g><title>libcorecrypto.dylib`AccelerateCrypto_ecb_AES_encrypt (20 samples, 0.01%)</title><rect x="14.5647%" y="277" width="0.0123%" height="15" fill="rgb(217,163,10)" fg:x="23690" fg:w="20"/><text x="14.8147%" y="287.50"></text></g><g><title>libcorecrypto.dylib`ccgcm_set_iv (45 samples, 0.03%)</title><rect x="14.5622%" y="293" width="0.0277%" height="15" fill="rgb(213,25,53)" fg:x="23686" fg:w="45"/><text x="14.8122%" y="303.50"></text></g><g><title>libcorecrypto.dylib`ccgcm_init_with_iv (511 samples, 0.31%)</title><rect x="14.2812%" y="309" width="0.3142%" height="15" fill="rgb(252,105,26)" fg:x="23229" fg:w="511"/><text x="14.5312%" y="319.50"></text></g><g><title>libcorecrypto.dylib`cc_disable_dit (165 samples, 0.10%)</title><rect x="14.6280%" y="277" width="0.1014%" height="15" fill="rgb(220,39,43)" fg:x="23793" fg:w="165"/><text x="14.8780%" y="287.50"></text></g><g><title>libcorecrypto.dylib`cc_cmp_safe (33 samples, 0.02%)</title><rect x="14.8180%" y="245" width="0.0203%" height="15" fill="rgb(229,68,48)" fg:x="24102" fg:w="33"/><text x="15.0680%" y="255.50"></text></g><g><title>libcorecrypto.dylib`ccmode_gcm_finalize (115 samples, 0.07%)</title><rect x="14.7737%" y="261" width="0.0707%" height="15" fill="rgb(252,8,32)" fg:x="24030" fg:w="115"/><text x="15.0237%" y="271.50"></text></g><g><title>libcorecrypto.dylib`ccgcm_finalize (202 samples, 0.12%)</title><rect x="14.7325%" y="277" width="0.1242%" height="15" fill="rgb(223,20,43)" fg:x="23963" fg:w="202"/><text x="14.9825%" y="287.50"></text></g><g><title>libcorecrypto.dylib`ccgcm_inc_iv (46 samples, 0.03%)</title><rect x="14.8567%" y="277" width="0.0283%" height="15" fill="rgb(229,81,49)" fg:x="24165" fg:w="46"/><text x="15.1067%" y="287.50"></text></g><g><title>libcorecrypto.dylib`cc_clear (39 samples, 0.02%)</title><rect x="14.9120%" y="245" width="0.0240%" height="15" fill="rgb(236,28,36)" fg:x="24255" fg:w="39"/><text x="15.1620%" y="255.50"></text></g><g><title>libcorecrypto.dylib`ccgcm_reset (89 samples, 0.05%)</title><rect x="14.8850%" y="277" width="0.0547%" height="15" fill="rgb(249,185,26)" fg:x="24211" fg:w="89"/><text x="15.1350%" y="287.50"></text></g><g><title>libcorecrypto.dylib`ccmode_gcm_reset (52 samples, 0.03%)</title><rect x="14.9077%" y="261" width="0.0320%" height="15" fill="rgb(249,174,33)" fg:x="24248" fg:w="52"/><text x="15.1577%" y="271.50"></text></g><g><title>libcorecrypto.dylib`Decrypt_Main_Loop (5,503 samples, 3.38%)</title><rect x="14.9815%" y="261" width="3.3833%" height="15" fill="rgb(233,201,37)" fg:x="24368" fg:w="5503"/><text x="15.2315%" y="271.50">lib..</text></g><g><title>libcorecrypto.dylib`Decrypt_Main_Loop_End (18 samples, 0.01%)</title><rect x="18.3647%" y="261" width="0.0111%" height="15" fill="rgb(221,78,26)" fg:x="29871" fg:w="18"/><text x="18.6147%" y="271.50"></text></g><g><title>libcorecrypto.dylib`ccaes_vng_gcm_decrypt (43 samples, 0.03%)</title><rect x="18.3783%" y="261" width="0.0264%" height="15" fill="rgb(250,127,30)" fg:x="29893" fg:w="43"/><text x="18.6283%" y="271.50"></text></g><g><title>libcorecrypto.dylib`ccgcm_update (5,644 samples, 3.47%)</title><rect x="14.9397%" y="277" width="3.4699%" height="15" fill="rgb(230,49,44)" fg:x="24300" fg:w="5644"/><text x="15.1897%" y="287.50">lib..</text></g><g><title>libcoretls.dylib`CCSymmAEADDecrypt (6,192 samples, 3.81%)</title><rect x="14.6188%" y="293" width="3.8069%" height="15" fill="rgb(229,67,23)" fg:x="23778" fg:w="6192"/><text x="14.8688%" y="303.50">libc..</text></g><g><title>libcoretls.dylib`tls_record_decrypt (7,017 samples, 4.31%)</title><rect x="14.1122%" y="325" width="4.3141%" height="15" fill="rgb(249,83,47)" fg:x="22954" fg:w="7017"/><text x="14.3622%" y="335.50">libco..</text></g><g><title>libcoretls.dylib`SSLDecryptRecord (6,213 samples, 3.82%)</title><rect x="14.6065%" y="309" width="3.8198%" height="15" fill="rgb(215,43,3)" fg:x="23758" fg:w="6213"/><text x="14.8565%" y="319.50">libc..</text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (91 samples, 0.06%)</title><rect x="18.4416%" y="309" width="0.0559%" height="15" fill="rgb(238,154,13)" fg:x="29996" fg:w="91"/><text x="18.6916%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (49 samples, 0.03%)</title><rect x="18.4674%" y="293" width="0.0301%" height="15" fill="rgb(219,56,2)" fg:x="30038" fg:w="49"/><text x="18.7174%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (108 samples, 0.07%)</title><rect x="18.4324%" y="325" width="0.0664%" height="15" fill="rgb(233,0,4)" fg:x="29981" fg:w="108"/><text x="18.6824%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1,704 samples, 1.05%)</title><rect x="18.4988%" y="325" width="1.0476%" height="15" fill="rgb(235,30,7)" fg:x="30089" fg:w="1704"/><text x="18.7488%" y="335.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (18 samples, 0.01%)</title><rect x="19.6466%" y="277" width="0.0111%" height="15" fill="rgb(250,79,13)" fg:x="31956" fg:w="18"/><text x="19.8966%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (11,355 samples, 6.98%)</title><rect x="19.6829%" y="261" width="6.9811%" height="15" fill="rgb(211,146,34)" fg:x="32015" fg:w="11355"/><text x="19.9329%" y="271.50">libsystem..</text></g><g><title>little-squid-cli`&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (11,416 samples, 7.02%)</title><rect x="19.6577%" y="277" width="7.0186%" height="15" fill="rgb(228,22,38)" fg:x="31974" fg:w="11416"/><text x="19.9077%" y="287.50">little-sq..</text></g><g><title>little-squid-cli`tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness (22 samples, 0.01%)</title><rect x="26.7039%" y="261" width="0.0135%" height="15" fill="rgb(235,168,5)" fg:x="43435" fg:w="22"/><text x="26.9539%" y="271.50"></text></g><g><title>little-squid-cli`tokio::runtime::io::registration::Registration::poll_ready (61 samples, 0.04%)</title><rect x="26.6812%" y="277" width="0.0375%" height="15" fill="rgb(221,155,16)" fg:x="43398" fg:w="61"/><text x="26.9312%" y="287.50"></text></g><g><title>little-squid-cli`tokio::net::tcp::stream::TcpStream::poll_read_priv (11,591 samples, 7.13%)</title><rect x="19.5974%" y="293" width="7.1262%" height="15" fill="rgb(215,215,53)" fg:x="31876" fg:w="11591"/><text x="19.8474%" y="303.50">little-squ..</text></g><g><title>little-squid-cli`std::panicking::try (11,652 samples, 7.16%)</title><rect x="19.5661%" y="309" width="7.1637%" height="15" fill="rgb(223,4,10)" fg:x="31825" fg:w="11652"/><text x="19.8161%" y="319.50">little-squ..</text></g><g><title>little-squid-cli`security_framework::secure_transport::read_func (11,692 samples, 7.19%)</title><rect x="19.5464%" y="325" width="7.1883%" height="15" fill="rgb(234,103,6)" fg:x="31793" fg:w="11692"/><text x="19.7964%" y="335.50">little-squ..</text></g><g><title>Security`SSLRecordReadInternal (20,657 samples, 12.70%)</title><rect x="14.0445%" y="341" width="12.7000%" height="15" fill="rgb(227,97,0)" fg:x="22844" fg:w="20657"/><text x="14.2945%" y="351.50">Security`SSLRecordR..</text></g><g><title>libcoretls.dylib`tls_record_decrypted_size (50 samples, 0.03%)</title><rect x="26.7599%" y="341" width="0.0307%" height="15" fill="rgb(234,150,53)" fg:x="43526" fg:w="50"/><text x="27.0099%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (27 samples, 0.02%)</title><rect x="26.7974%" y="341" width="0.0166%" height="15" fill="rgb(228,201,54)" fg:x="43587" fg:w="27"/><text x="27.0474%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`free (22 samples, 0.01%)</title><rect x="26.8207%" y="341" width="0.0135%" height="15" fill="rgb(222,22,37)" fg:x="43625" fg:w="22"/><text x="27.0707%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (21 samples, 0.01%)</title><rect x="26.8404%" y="341" width="0.0129%" height="15" fill="rgb(237,53,32)" fg:x="43657" fg:w="21"/><text x="27.0904%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc (21 samples, 0.01%)</title><rect x="26.8558%" y="341" width="0.0129%" height="15" fill="rgb(233,25,53)" fg:x="43682" fg:w="21"/><text x="27.1058%" y="351.50"></text></g><g><title>Security`SSLRead (21,029 samples, 12.93%)</title><rect x="13.9486%" y="357" width="12.9287%" height="15" fill="rgb(210,40,34)" fg:x="22688" fg:w="21029"/><text x="14.1986%" y="367.50">Security`SSLRead</text></g><g><title>Security`SSLRecordFreeInternal (19 samples, 0.01%)</title><rect x="26.8773%" y="357" width="0.0117%" height="15" fill="rgb(241,220,44)" fg:x="43717" fg:w="19"/><text x="27.1273%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (966 samples, 0.59%)</title><rect x="26.9037%" y="357" width="0.5939%" height="15" fill="rgb(235,28,35)" fg:x="43760" fg:w="966"/><text x="27.1537%" y="367.50"></text></g><g><title>little-squid-cli`&lt;security_framework::secure_transport::SslStream&lt;S&gt; as std::io::Read&gt;::read (22,127 samples, 13.60%)</title><rect x="13.8958%" y="373" width="13.6037%" height="15" fill="rgb(210,56,17)" fg:x="22602" fg:w="22127"/><text x="14.1458%" y="383.50">little-squid-cli`&lt;sec..</text></g><g><title>little-squid-cli`&lt;tokio_native_tls::TlsStream&lt;S&gt; as tokio::io::async_read::AsyncRead&gt;::poll_read (22,255 samples, 13.68%)</title><rect x="13.8244%" y="389" width="13.6824%" height="15" fill="rgb(224,130,29)" fg:x="22486" fg:w="22255"/><text x="14.0744%" y="399.50">little-squid-cli`&lt;tok..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (31 samples, 0.02%)</title><rect x="27.5308%" y="373" width="0.0191%" height="15" fill="rgb(235,212,8)" fg:x="44780" fg:w="31"/><text x="27.7808%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (30 samples, 0.02%)</title><rect x="27.5314%" y="357" width="0.0184%" height="15" fill="rgb(223,33,50)" fg:x="44781" fg:w="30"/><text x="27.7814%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (29 samples, 0.02%)</title><rect x="27.5321%" y="341" width="0.0178%" height="15" fill="rgb(219,149,13)" fg:x="44782" fg:w="29"/><text x="27.7821%" y="351.50"></text></g><g><title>little-squid-cli`bytes::bytes_mut::BytesMut::reserve_inner (60 samples, 0.04%)</title><rect x="27.5142%" y="389" width="0.0369%" height="15" fill="rgb(250,156,29)" fg:x="44753" fg:w="60"/><text x="27.7642%" y="399.50"></text></g><g><title>little-squid-cli`hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_read_from_io (26,000 samples, 15.98%)</title><rect x="11.5718%" y="405" width="15.9849%" height="15" fill="rgb(216,193,19)" fg:x="18822" fg:w="26000"/><text x="11.8218%" y="415.50">little-squid-cli`hyper::p..</text></g><g><title>little-squid-cli`&lt;hyper::proto::h1::io::Buffered&lt;T,B&gt; as hyper::proto::h1::io::MemRead&gt;::read_mem (26,170 samples, 16.09%)</title><rect x="11.4753%" y="421" width="16.0894%" height="15" fill="rgb(216,135,14)" fg:x="18665" fg:w="26170"/><text x="11.7253%" y="431.50">little-squid-cli`&lt;hyper::..</text></g><g><title>little-squid-cli`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_body (26,450 samples, 16.26%)</title><rect x="11.3210%" y="453" width="16.2615%" height="15" fill="rgb(241,47,5)" fg:x="18414" fg:w="26450"/><text x="11.5710%" y="463.50">little-squid-cli`hyper::p..</text></g><g><title>little-squid-cli`hyper::proto::h1::decode::Decoder::decode (26,388 samples, 16.22%)</title><rect x="11.3591%" y="437" width="16.2234%" height="15" fill="rgb(233,42,35)" fg:x="18476" fg:w="26388"/><text x="11.6091%" y="447.50">little-squid-cli`hyper::p..</text></g><g><title>little-squid-cli`hyper::proto::h1::conn::Conn&lt;I,B,T&gt;::poll_read_head (24 samples, 0.01%)</title><rect x="27.5825%" y="453" width="0.0148%" height="15" fill="rgb(231,13,6)" fg:x="44864" fg:w="24"/><text x="27.8325%" y="463.50"></text></g><g><title>little-squid-cli`hyper::proto::h1::io::Buffered&lt;T,B&gt;::parse (24 samples, 0.01%)</title><rect x="27.5825%" y="437" width="0.0148%" height="15" fill="rgb(207,181,40)" fg:x="44864" fg:w="24"/><text x="27.8325%" y="447.50"></text></g><g><title>little-squid-cli`hyper::proto::h1::decode::Decoder::decode (18 samples, 0.01%)</title><rect x="27.6108%" y="453" width="0.0111%" height="15" fill="rgb(254,173,49)" fg:x="44910" fg:w="18"/><text x="27.8608%" y="463.50"></text></g><g><title>little-squid-cli`hyper::proto::h1::io::Buffered&lt;T,B&gt;::poll_flush (91 samples, 0.06%)</title><rect x="27.6231%" y="453" width="0.0559%" height="15" fill="rgb(221,1,38)" fg:x="44930" fg:w="91"/><text x="27.8731%" y="463.50"></text></g><g><title>little-squid-cli`tokio_native_tls::TlsStream&lt;S&gt;::with_context (47 samples, 0.03%)</title><rect x="27.6501%" y="437" width="0.0289%" height="15" fill="rgb(206,124,46)" fg:x="44974" fg:w="47"/><text x="27.9001%" y="447.50"></text></g><g><title>little-squid-cli`&lt;hyper::client::conn::ProtoClient&lt;T,B&gt; as core::future::future::Future&gt;::poll (27,350 samples, 16.81%)</title><rect x="10.8654%" y="469" width="16.8148%" height="15" fill="rgb(249,21,11)" fg:x="17673" fg:w="27350"/><text x="11.1154%" y="479.50">little-squid-cli`&lt;hyper::c..</text></g><g><title>little-squid-cli`&lt;hyper::client::conn::Connection&lt;T,B&gt; as core::future::future::Future&gt;::poll (27,396 samples, 16.84%)</title><rect x="10.8605%" y="485" width="16.8431%" height="15" fill="rgb(222,201,40)" fg:x="17665" fg:w="27396"/><text x="11.1105%" y="495.50">little-squid-cli`&lt;hyper::c..</text></g><g><title>CoreFoundation`_CFRelease (24 samples, 0.01%)</title><rect x="27.7067%" y="453" width="0.0148%" height="15" fill="rgb(235,61,29)" fg:x="45066" fg:w="24"/><text x="27.9567%" y="463.50"></text></g><g><title>Security`SSLContextDestroy (24 samples, 0.01%)</title><rect x="27.7067%" y="437" width="0.0148%" height="15" fill="rgb(219,207,3)" fg:x="45066" fg:w="24"/><text x="27.9567%" y="447.50"></text></g><g><title>little-squid-cli`core::ptr::drop_in_place&lt;futures_util::future::try_future::into_future::IntoFuture&lt;hyper::client::conn::Connection&lt;reqwest::connect::Conn,reqwest::async_impl::body::ImplStream&gt;&gt;&gt; (35 samples, 0.02%)</title><rect x="27.7048%" y="485" width="0.0215%" height="15" fill="rgb(222,56,46)" fg:x="45063" fg:w="35"/><text x="27.9548%" y="495.50"></text></g><g><title>little-squid-cli`core::ptr::drop_in_place&lt;tokio_native_tls::TlsStream&lt;tokio::net::tcp::stream::TcpStream&gt;&gt; (32 samples, 0.02%)</title><rect x="27.7067%" y="469" width="0.0197%" height="15" fill="rgb(239,76,54)" fg:x="45066" fg:w="32"/><text x="27.9567%" y="479.50"></text></g><g><title>little-squid-cli`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (27,459 samples, 16.88%)</title><rect x="10.8457%" y="501" width="16.8818%" height="15" fill="rgb(231,124,27)" fg:x="17641" fg:w="27459"/><text x="11.0957%" y="511.50">little-squid-cli`&lt;futures_..</text></g><g><title>little-squid-cli`&lt;tokio::runtime::task::core::TaskIdGuard as core::ops::drop::Drop&gt;::drop (24 samples, 0.01%)</title><rect x="27.7325%" y="501" width="0.0148%" height="15" fill="rgb(249,195,6)" fg:x="45108" fg:w="24"/><text x="27.9825%" y="511.50"></text></g><g><title>libsystem_kernel.dylib`madvise (343 samples, 0.21%)</title><rect x="27.7903%" y="469" width="0.2109%" height="15" fill="rgb(237,174,47)" fg:x="45202" fg:w="343"/><text x="28.0403%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (363 samples, 0.22%)</title><rect x="27.7903%" y="485" width="0.2232%" height="15" fill="rgb(206,201,31)" fg:x="45202" fg:w="363"/><text x="28.0403%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`free_large (20 samples, 0.01%)</title><rect x="28.0012%" y="469" width="0.0123%" height="15" fill="rgb(231,57,52)" fg:x="45545" fg:w="20"/><text x="28.2512%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (20 samples, 0.01%)</title><rect x="28.0012%" y="453" width="0.0123%" height="15" fill="rgb(248,177,22)" fg:x="45545" fg:w="20"/><text x="28.2512%" y="463.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (20 samples, 0.01%)</title><rect x="28.0012%" y="437" width="0.0123%" height="15" fill="rgb(215,211,37)" fg:x="45545" fg:w="20"/><text x="28.2512%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (29 samples, 0.02%)</title><rect x="28.0135%" y="485" width="0.0178%" height="15" fill="rgb(241,128,51)" fg:x="45565" fg:w="29"/><text x="28.2635%" y="495.50"></text></g><g><title>libsystem_kernel.dylib`madvise (29 samples, 0.02%)</title><rect x="28.0135%" y="469" width="0.0178%" height="15" fill="rgb(227,165,31)" fg:x="45565" fg:w="29"/><text x="28.2635%" y="479.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2,580 samples, 1.59%)</title><rect x="28.0319%" y="485" width="1.5862%" height="15" fill="rgb(228,167,24)" fg:x="45595" fg:w="2580"/><text x="28.2819%" y="495.50"></text></g><g><title>little-squid-cli`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (47 samples, 0.03%)</title><rect x="29.6187%" y="485" width="0.0289%" height="15" fill="rgb(228,143,12)" fg:x="48176" fg:w="47"/><text x="29.8687%" y="495.50"></text></g><g><title>little-squid-cli`&lt;hyper::client::connect::http::HttpConnector&lt;R&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::_{{closure}} (39 samples, 0.02%)</title><rect x="29.6888%" y="325" width="0.0240%" height="15" fill="rgb(249,149,8)" fg:x="48290" fg:w="39"/><text x="29.9388%" y="335.50"></text></g><g><title>little-squid-cli`&lt;&amp;mio::net::tcp::stream::TcpStream as std::io::Read&gt;::read (18 samples, 0.01%)</title><rect x="29.7171%" y="181" width="0.0111%" height="15" fill="rgb(243,35,44)" fg:x="48336" fg:w="18"/><text x="29.9671%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`__recvfrom (17 samples, 0.01%)</title><rect x="29.7177%" y="165" width="0.0105%" height="15" fill="rgb(246,89,9)" fg:x="48337" fg:w="17"/><text x="29.9677%" y="175.50"></text></g><g><title>Security`SSLRecordReadInternal (21 samples, 0.01%)</title><rect x="29.7158%" y="245" width="0.0129%" height="15" fill="rgb(233,213,13)" fg:x="48334" fg:w="21"/><text x="29.9658%" y="255.50"></text></g><g><title>little-squid-cli`security_framework::secure_transport::read_func (19 samples, 0.01%)</title><rect x="29.7171%" y="229" width="0.0117%" height="15" fill="rgb(233,141,41)" fg:x="48336" fg:w="19"/><text x="29.9671%" y="239.50"></text></g><g><title>little-squid-cli`std::panicking::try (19 samples, 0.01%)</title><rect x="29.7171%" y="213" width="0.0117%" height="15" fill="rgb(239,167,4)" fg:x="48336" fg:w="19"/><text x="29.9671%" y="223.50"></text></g><g><title>little-squid-cli`tokio::net::tcp::stream::TcpStream::poll_read_priv (19 samples, 0.01%)</title><rect x="29.7171%" y="197" width="0.0117%" height="15" fill="rgb(209,217,16)" fg:x="48336" fg:w="19"/><text x="29.9671%" y="207.50"></text></g><g><title>libcorecrypto.dylib`ccn_mul_256_montgomery (30 samples, 0.02%)</title><rect x="29.7570%" y="117" width="0.0184%" height="15" fill="rgb(219,88,35)" fg:x="48401" fg:w="30"/><text x="30.0070%" y="127.50"></text></g><g><title>libcorecrypto.dylib`ccec_mult_blinded_ws (73 samples, 0.04%)</title><rect x="29.7386%" y="149" width="0.0449%" height="15" fill="rgb(220,193,23)" fg:x="48371" fg:w="73"/><text x="29.9886%" y="159.50"></text></g><g><title>libcorecrypto.dylib`ccec_mult_ws (73 samples, 0.04%)</title><rect x="29.7386%" y="133" width="0.0449%" height="15" fill="rgb(230,90,52)" fg:x="48371" fg:w="73"/><text x="29.9886%" y="143.50"></text></g><g><title>libcorecrypto.dylib`ccecdh_compute_shared_secret (78 samples, 0.05%)</title><rect x="29.7367%" y="181" width="0.0480%" height="15" fill="rgb(252,106,19)" fg:x="48368" fg:w="78"/><text x="29.9867%" y="191.50"></text></g><g><title>libcorecrypto.dylib`ccecdh_compute_shared_secret_ws (78 samples, 0.05%)</title><rect x="29.7367%" y="165" width="0.0480%" height="15" fill="rgb(206,74,20)" fg:x="48368" fg:w="78"/><text x="29.9867%" y="175.50"></text></g><g><title>libcorecrypto.dylib`ccec_mult_XYCZadd_ws (18 samples, 0.01%)</title><rect x="29.8007%" y="53" width="0.0111%" height="15" fill="rgb(230,138,44)" fg:x="48472" fg:w="18"/><text x="30.0507%" y="63.50"></text></g><g><title>libcorecrypto.dylib`ccn_mul_256_montgomery (27 samples, 0.02%)</title><rect x="29.8124%" y="53" width="0.0166%" height="15" fill="rgb(235,182,43)" fg:x="48491" fg:w="27"/><text x="30.0624%" y="63.50"></text></g><g><title>libcorecrypto.dylib`ccec_make_pub_from_priv_ws (91 samples, 0.06%)</title><rect x="29.7847%" y="101" width="0.0559%" height="15" fill="rgb(242,16,51)" fg:x="48446" fg:w="91"/><text x="30.0347%" y="111.50"></text></g><g><title>libcorecrypto.dylib`ccec_mult_blinded_ws (86 samples, 0.05%)</title><rect x="29.7878%" y="85" width="0.0529%" height="15" fill="rgb(248,9,4)" fg:x="48451" fg:w="86"/><text x="30.0378%" y="95.50"></text></g><g><title>libcorecrypto.dylib`ccec_mult_ws (84 samples, 0.05%)</title><rect x="29.7890%" y="69" width="0.0516%" height="15" fill="rgb(210,31,22)" fg:x="48453" fg:w="84"/><text x="30.0390%" y="79.50"></text></g><g><title>libcorecrypto.dylib`ccec_generate_key_internal_fips_ws (92 samples, 0.06%)</title><rect x="29.7847%" y="117" width="0.0566%" height="15" fill="rgb(239,54,39)" fg:x="48446" fg:w="92"/><text x="30.0347%" y="127.50"></text></g><g><title>libcorecrypto.dylib`ccec_mult_XYCZaddC_ws (19 samples, 0.01%)</title><rect x="29.8431%" y="37" width="0.0117%" height="15" fill="rgb(230,99,41)" fg:x="48541" fg:w="19"/><text x="30.0931%" y="47.50"></text></g><g><title>libcorecrypto.dylib`ccn_mul_256_montgomery (27 samples, 0.02%)</title><rect x="29.8640%" y="37" width="0.0166%" height="15" fill="rgb(253,106,12)" fg:x="48575" fg:w="27"/><text x="30.1140%" y="47.50"></text></g><g><title>libcorecrypto.dylib`ccec_mult_ws (82 samples, 0.05%)</title><rect x="29.8431%" y="53" width="0.0504%" height="15" fill="rgb(213,46,41)" fg:x="48541" fg:w="82"/><text x="30.0931%" y="63.50"></text></g><g><title>libcorecrypto.dylib`ccec_mult_blinded_ws (84 samples, 0.05%)</title><rect x="29.8431%" y="69" width="0.0516%" height="15" fill="rgb(215,133,35)" fg:x="48541" fg:w="84"/><text x="30.0931%" y="79.50"></text></g><g><title>libcorecrypto.dylib`ccec_sign_internal_ws (97 samples, 0.06%)</title><rect x="29.8413%" y="101" width="0.0596%" height="15" fill="rgb(213,28,5)" fg:x="48538" fg:w="97"/><text x="30.0913%" y="111.50"></text></g><g><title>libcorecrypto.dylib`ccec_sign_internal_inner_ws (97 samples, 0.06%)</title><rect x="29.8413%" y="85" width="0.0596%" height="15" fill="rgb(215,77,49)" fg:x="48538" fg:w="97"/><text x="30.0913%" y="95.50"></text></g><g><title>libcorecrypto.dylib`ccec_double_ws (25 samples, 0.02%)</title><rect x="29.9046%" y="69" width="0.0154%" height="15" fill="rgb(248,100,22)" fg:x="48641" fg:w="25"/><text x="30.1546%" y="79.50"></text></g><g><title>libcorecrypto.dylib`ccec_twin_mult_ws (68 samples, 0.04%)</title><rect x="29.9015%" y="85" width="0.0418%" height="15" fill="rgb(208,67,9)" fg:x="48636" fg:w="68"/><text x="30.1515%" y="95.50"></text></g><g><title>libcoretls.dylib`sslEcdhCreateKey (259 samples, 0.16%)</title><rect x="29.7847%" y="181" width="0.1592%" height="15" fill="rgb(219,133,21)" fg:x="48446" fg:w="259"/><text x="30.0347%" y="191.50"></text></g><g><title>libcorecrypto.dylib`ccec_generate_key (259 samples, 0.16%)</title><rect x="29.7847%" y="165" width="0.1592%" height="15" fill="rgb(246,46,29)" fg:x="48446" fg:w="259"/><text x="30.0347%" y="175.50"></text></g><g><title>libcorecrypto.dylib`ccec_generate_key_fips (259 samples, 0.16%)</title><rect x="29.7847%" y="149" width="0.1592%" height="15" fill="rgb(246,185,52)" fg:x="48446" fg:w="259"/><text x="30.0347%" y="159.50"></text></g><g><title>libcorecrypto.dylib`ccec_generate_key_fips_ws (259 samples, 0.16%)</title><rect x="29.7847%" y="133" width="0.1592%" height="15" fill="rgb(252,136,11)" fg:x="48446" fg:w="259"/><text x="30.0347%" y="143.50"></text></g><g><title>libcorecrypto.dylib`ccec_pairwise_consistency_check_ws (167 samples, 0.10%)</title><rect x="29.8413%" y="117" width="0.1027%" height="15" fill="rgb(219,138,53)" fg:x="48538" fg:w="167"/><text x="30.0913%" y="127.50"></text></g><g><title>libcorecrypto.dylib`ccec_verify_internal_with_base_ws (70 samples, 0.04%)</title><rect x="29.9009%" y="101" width="0.0430%" height="15" fill="rgb(211,51,23)" fg:x="48635" fg:w="70"/><text x="30.1509%" y="111.50"></text></g><g><title>libcoretls.dylib`SSLPrepareAndQueueMessage (341 samples, 0.21%)</title><rect x="29.7355%" y="213" width="0.2096%" height="15" fill="rgb(247,221,28)" fg:x="48366" fg:w="341"/><text x="29.9855%" y="223.50"></text></g><g><title>libcoretls.dylib`SSLEncodeKeyExchange (339 samples, 0.21%)</title><rect x="29.7367%" y="197" width="0.2084%" height="15" fill="rgb(251,222,45)" fg:x="48368" fg:w="339"/><text x="29.9867%" y="207.50"></text></g><g><title>libcoretls.dylib`tls_handshake_continue (346 samples, 0.21%)</title><rect x="29.7349%" y="245" width="0.2127%" height="15" fill="rgb(217,162,53)" fg:x="48365" fg:w="346"/><text x="29.9849%" y="255.50"></text></g><g><title>libcoretls.dylib`SSLAdvanceHandshake (346 samples, 0.21%)</title><rect x="29.7349%" y="229" width="0.2127%" height="15" fill="rgb(229,93,14)" fg:x="48365" fg:w="346"/><text x="29.9849%" y="239.50"></text></g><g><title>Security`SecCDSAKeyCopyAttributeDictionary(__SecKey*) (26 samples, 0.02%)</title><rect x="29.9673%" y="165" width="0.0160%" height="15" fill="rgb(209,67,49)" fg:x="48743" fg:w="26"/><text x="30.2173%" y="175.50"></text></g><g><title>Security`SecKeyCopyModulus (28 samples, 0.02%)</title><rect x="29.9667%" y="181" width="0.0172%" height="15" fill="rgb(213,87,29)" fg:x="48742" fg:w="28"/><text x="30.2167%" y="191.50"></text></g><g><title>Security`Security::KeychainCore::Certificate::copyFirstFieldValue (31 samples, 0.02%)</title><rect x="29.9857%" y="133" width="0.0191%" height="15" fill="rgb(205,151,52)" fg:x="48773" fg:w="31"/><text x="30.2357%" y="143.50"></text></g><g><title>Security`Security::KeychainCore::Certificate::publicKey (33 samples, 0.02%)</title><rect x="29.9851%" y="149" width="0.0203%" height="15" fill="rgb(253,215,39)" fg:x="48772" fg:w="33"/><text x="30.2351%" y="159.50"></text></g><g><title>Security`SecTrustCopyPublicKey (36 samples, 0.02%)</title><rect x="29.9845%" y="181" width="0.0221%" height="15" fill="rgb(221,220,41)" fg:x="48771" fg:w="36"/><text x="30.2345%" y="191.50"></text></g><g><title>Security`SecCertificateCopyPublicKey$LEGACYMAC (36 samples, 0.02%)</title><rect x="29.9845%" y="165" width="0.0221%" height="15" fill="rgb(218,133,21)" fg:x="48771" fg:w="36"/><text x="30.2345%" y="175.50"></text></g><g><title>Security`SecCertificateParse (20 samples, 0.01%)</title><rect x="30.0165%" y="149" width="0.0123%" height="15" fill="rgb(221,193,43)" fg:x="48823" fg:w="20"/><text x="30.2665%" y="159.50"></text></g><g><title>Security`SecCertificateCreateWithData (23 samples, 0.01%)</title><rect x="30.0152%" y="165" width="0.0141%" height="15" fill="rgb(240,128,52)" fg:x="48821" fg:w="23"/><text x="30.2652%" y="175.50"></text></g><g><title>libcoretls_cfhelpers.dylib`tls_helper_create_cfarray_from_certificates (25 samples, 0.02%)</title><rect x="30.0146%" y="181" width="0.0154%" height="15" fill="rgb(253,114,12)" fg:x="48820" fg:w="25"/><text x="30.2646%" y="191.50"></text></g><g><title>Security`tls_handshake_message_callback (136 samples, 0.08%)</title><rect x="29.9476%" y="213" width="0.0836%" height="15" fill="rgb(215,223,47)" fg:x="48711" fg:w="136"/><text x="30.1976%" y="223.50"></text></g><g><title>libcoretls_cfhelpers.dylib`tls_helper_set_peer_pubkey (136 samples, 0.08%)</title><rect x="29.9476%" y="197" width="0.0836%" height="15" fill="rgb(248,225,23)" fg:x="48711" fg:w="136"/><text x="30.1976%" y="207.50"></text></g><g><title>Security`tls_verify_peer_cert (24 samples, 0.01%)</title><rect x="30.0312%" y="213" width="0.0148%" height="15" fill="rgb(250,108,0)" fg:x="48847" fg:w="24"/><text x="30.2812%" y="223.50"></text></g><g><title>Security`sslCreateSecTrust (24 samples, 0.01%)</title><rect x="30.0312%" y="197" width="0.0148%" height="15" fill="rgb(228,208,7)" fg:x="48847" fg:w="24"/><text x="30.2812%" y="207.50"></text></g><g><title>libcoretls_cfhelpers.dylib`tls_helper_create_peer_trust (24 samples, 0.01%)</title><rect x="30.0312%" y="181" width="0.0148%" height="15" fill="rgb(244,45,10)" fg:x="48847" fg:w="24"/><text x="30.2812%" y="191.50"></text></g><g><title>libcoretls_cfhelpers.dylib`tls_helper_create_cfarray_from_certificates (17 samples, 0.01%)</title><rect x="30.0355%" y="165" width="0.0105%" height="15" fill="rgb(207,125,25)" fg:x="48854" fg:w="17"/><text x="30.2855%" y="175.50"></text></g><g><title>libcoretls.dylib`tls_metric_client_finished (17 samples, 0.01%)</title><rect x="30.0472%" y="197" width="0.0105%" height="15" fill="rgb(210,195,18)" fg:x="48873" fg:w="17"/><text x="30.2972%" y="207.50"></text></g><g><title>libcoretls.dylib`SSLAdvanceHandshake (19 samples, 0.01%)</title><rect x="30.0466%" y="213" width="0.0117%" height="15" fill="rgb(249,80,12)" fg:x="48872" fg:w="19"/><text x="30.2966%" y="223.50"></text></g><g><title>libcoretls.dylib`SSLProcessServerKeyExchange (22 samples, 0.01%)</title><rect x="30.0632%" y="197" width="0.0135%" height="15" fill="rgb(221,65,9)" fg:x="48899" fg:w="22"/><text x="30.3132%" y="207.50"></text></g><g><title>libcoretls.dylib`sslRsaVerify (22 samples, 0.01%)</title><rect x="30.0632%" y="181" width="0.0135%" height="15" fill="rgb(235,49,36)" fg:x="48899" fg:w="22"/><text x="30.3132%" y="191.50"></text></g><g><title>libcorecrypto.dylib`ccrsa_verify_pkcs1v15 (22 samples, 0.01%)</title><rect x="30.0632%" y="165" width="0.0135%" height="15" fill="rgb(225,32,20)" fg:x="48899" fg:w="22"/><text x="30.3132%" y="175.50"></text></g><g><title>libcorecrypto.dylib`ccrsa_verify_pkcs1v15_digest (22 samples, 0.01%)</title><rect x="30.0632%" y="149" width="0.0135%" height="15" fill="rgb(215,141,46)" fg:x="48899" fg:w="22"/><text x="30.3132%" y="159.50"></text></g><g><title>libcorecrypto.dylib`ccrsa_verify_pkcs1v15_digest_ws (22 samples, 0.01%)</title><rect x="30.0632%" y="133" width="0.0135%" height="15" fill="rgb(250,160,47)" fg:x="48899" fg:w="22"/><text x="30.3132%" y="143.50"></text></g><g><title>libcorecrypto.dylib`ccrsa_verify_pkcs1v15_internal_ws (22 samples, 0.01%)</title><rect x="30.0632%" y="117" width="0.0135%" height="15" fill="rgb(216,222,40)" fg:x="48899" fg:w="22"/><text x="30.3132%" y="127.50"></text></g><g><title>libcorecrypto.dylib`cczp_mm_power_fast_ws (22 samples, 0.01%)</title><rect x="30.0632%" y="101" width="0.0135%" height="15" fill="rgb(234,217,39)" fg:x="48899" fg:w="22"/><text x="30.3132%" y="111.50"></text></g><g><title>libcorecrypto.dylib`cczp_power_fast_ws (19 samples, 0.01%)</title><rect x="30.0650%" y="85" width="0.0117%" height="15" fill="rgb(207,178,40)" fg:x="48902" fg:w="19"/><text x="30.3150%" y="95.50"></text></g><g><title>libcoretls.dylib`SSLProcessHandshakeMessage (31 samples, 0.02%)</title><rect x="30.0583%" y="213" width="0.0191%" height="15" fill="rgb(221,136,13)" fg:x="48891" fg:w="31"/><text x="30.3083%" y="223.50"></text></g><g><title>libcoretls.dylib`tls_handshake_process (223 samples, 0.14%)</title><rect x="29.9476%" y="245" width="0.1371%" height="15" fill="rgb(249,199,10)" fg:x="48711" fg:w="223"/><text x="30.1976%" y="255.50"></text></g><g><title>libcoretls.dylib`SSLProcessHandshakeRecordInner (223 samples, 0.14%)</title><rect x="29.9476%" y="229" width="0.1371%" height="15" fill="rgb(249,222,13)" fg:x="48711" fg:w="223"/><text x="30.1976%" y="239.50"></text></g><g><title>Security`SSLHandshake (604 samples, 0.37%)</title><rect x="29.7140%" y="277" width="0.3713%" height="15" fill="rgb(244,185,38)" fg:x="48331" fg:w="604"/><text x="29.9640%" y="287.50"></text></g><g><title>Security`SSLHandshakeProceed (602 samples, 0.37%)</title><rect x="29.7152%" y="261" width="0.3701%" height="15" fill="rgb(236,202,9)" fg:x="48333" fg:w="602"/><text x="29.9652%" y="271.50"></text></g><g><title>Security`__handle_trust_evaluate_xpc_block_invoke_2 (23 samples, 0.01%)</title><rect x="30.0995%" y="101" width="0.0141%" height="15" fill="rgb(250,229,37)" fg:x="48958" fg:w="23"/><text x="30.3495%" y="111.50"></text></g><g><title>libdispatch.dylib`_dispatch_mach_send_and_wait_for_reply (21 samples, 0.01%)</title><rect x="30.1142%" y="53" width="0.0129%" height="15" fill="rgb(206,174,23)" fg:x="48982" fg:w="21"/><text x="30.3642%" y="63.50"></text></g><g><title>libdispatch.dylib`dispatch_mach_send_with_result_and_wait_for_reply (22 samples, 0.01%)</title><rect x="30.1142%" y="69" width="0.0135%" height="15" fill="rgb(211,33,43)" fg:x="48982" fg:w="22"/><text x="30.3642%" y="79.50"></text></g><g><title>Security`securityd_message_with_reply_sync (27 samples, 0.02%)</title><rect x="30.1142%" y="101" width="0.0166%" height="15" fill="rgb(245,58,50)" fg:x="48982" fg:w="27"/><text x="30.3642%" y="111.50"></text></g><g><title>libxpc.dylib`xpc_connection_send_message_with_reply_sync (27 samples, 0.02%)</title><rect x="30.1142%" y="85" width="0.0166%" height="15" fill="rgb(244,68,36)" fg:x="48982" fg:w="27"/><text x="30.3642%" y="95.50"></text></g><g><title>Security`SecOSStatusWith (74 samples, 0.05%)</title><rect x="30.0903%" y="149" width="0.0455%" height="15" fill="rgb(232,229,15)" fg:x="48943" fg:w="74"/><text x="30.3403%" y="159.50"></text></g><g><title>Security`__SecTrustEvaluateIfNecessary_block_invoke_3 (74 samples, 0.05%)</title><rect x="30.0903%" y="133" width="0.0455%" height="15" fill="rgb(254,30,23)" fg:x="48943" fg:w="74"/><text x="30.3403%" y="143.50"></text></g><g><title>Security`securityd_send_sync_and_do (74 samples, 0.05%)</title><rect x="30.0903%" y="117" width="0.0455%" height="15" fill="rgb(235,160,14)" fg:x="48943" fg:w="74"/><text x="30.3403%" y="127.50"></text></g><g><title>Security`__SecTrustEvaluateIfNecessary_block_invoke_2 (76 samples, 0.05%)</title><rect x="30.0903%" y="165" width="0.0467%" height="15" fill="rgb(212,155,44)" fg:x="48943" fg:w="76"/><text x="30.3403%" y="175.50"></text></g><g><title>little-squid-cli`&lt;tokio_native_tls::MidHandshake&lt;S&gt; as core::future::future::Future&gt;::poll (691 samples, 0.42%)</title><rect x="29.7128%" y="325" width="0.4248%" height="15" fill="rgb(226,2,50)" fg:x="48329" fg:w="691"/><text x="29.9628%" y="335.50"></text></g><g><title>little-squid-cli`native_tls::imp::MidHandshakeTlsStream&lt;S&gt;::handshake (690 samples, 0.42%)</title><rect x="29.7134%" y="309" width="0.4242%" height="15" fill="rgb(234,177,6)" fg:x="48330" fg:w="690"/><text x="29.9634%" y="319.50"></text></g><g><title>little-squid-cli`security_framework::secure_transport::MidHandshakeClientBuilder&lt;S&gt;::handshake (690 samples, 0.42%)</title><rect x="29.7134%" y="293" width="0.4242%" height="15" fill="rgb(217,24,9)" fg:x="48330" fg:w="690"/><text x="29.9634%" y="303.50"></text></g><g><title>little-squid-cli`security_framework::trust::SecTrust::evaluate_with_error (82 samples, 0.05%)</title><rect x="30.0872%" y="277" width="0.0504%" height="15" fill="rgb(220,13,46)" fg:x="48938" fg:w="82"/><text x="30.3372%" y="287.50"></text></g><g><title>Security`SecTrustEvaluateInternal (82 samples, 0.05%)</title><rect x="30.0872%" y="261" width="0.0504%" height="15" fill="rgb(239,221,27)" fg:x="48938" fg:w="82"/><text x="30.3372%" y="271.50"></text></g><g><title>Security`SecTrustEvaluateIfNecessary (81 samples, 0.05%)</title><rect x="30.0878%" y="245" width="0.0498%" height="15" fill="rgb(222,198,25)" fg:x="48939" fg:w="81"/><text x="30.3378%" y="255.50"></text></g><g><title>libdispatch.dylib`_dispatch_lane_barrier_sync_invoke_and_complete (77 samples, 0.05%)</title><rect x="30.0903%" y="229" width="0.0473%" height="15" fill="rgb(211,99,13)" fg:x="48943" fg:w="77"/><text x="30.3403%" y="239.50"></text></g><g><title>libdispatch.dylib`_dispatch_client_callout (77 samples, 0.05%)</title><rect x="30.0903%" y="213" width="0.0473%" height="15" fill="rgb(232,111,31)" fg:x="48943" fg:w="77"/><text x="30.3403%" y="223.50"></text></g><g><title>Security`__SecTrustEvaluateIfNecessary_block_invoke.521 (77 samples, 0.05%)</title><rect x="30.0903%" y="197" width="0.0473%" height="15" fill="rgb(245,82,37)" fg:x="48943" fg:w="77"/><text x="30.3403%" y="207.50"></text></g><g><title>libsystem_trace.dylib`_os_activity_initiate_impl (77 samples, 0.05%)</title><rect x="30.0903%" y="181" width="0.0473%" height="15" fill="rgb(227,149,46)" fg:x="48943" fg:w="77"/><text x="30.3403%" y="191.50"></text></g><g><title>little-squid-cli`&lt;hyper::service::oneshot::Oneshot&lt;S,Req&gt; as core::future::future::Future&gt;::poll (773 samples, 0.48%)</title><rect x="29.6814%" y="389" width="0.4752%" height="15" fill="rgb(218,36,50)" fg:x="48278" fg:w="773"/><text x="29.9314%" y="399.50"></text></g><g><title>little-squid-cli`reqwest::connect::with_timeout::_{{closure}} (771 samples, 0.47%)</title><rect x="29.6826%" y="373" width="0.4740%" height="15" fill="rgb(226,80,48)" fg:x="48280" fg:w="771"/><text x="29.9326%" y="383.50"></text></g><g><title>little-squid-cli`reqwest::connect::Connector::connect_with_maybe_proxy::_{{closure}} (769 samples, 0.47%)</title><rect x="29.6839%" y="357" width="0.4728%" height="15" fill="rgb(238,224,15)" fg:x="48282" fg:w="769"/><text x="29.9339%" y="367.50"></text></g><g><title>little-squid-cli`&lt;hyper_tls::client::HttpsConnector&lt;T&gt; as tower_service::Service&lt;http::uri::Uri&gt;&gt;::call::_{{closure}} (766 samples, 0.47%)</title><rect x="29.6857%" y="341" width="0.4709%" height="15" fill="rgb(241,136,10)" fg:x="48285" fg:w="766"/><text x="29.9357%" y="351.50"></text></g><g><title>little-squid-cli`&lt;tokio_native_tls::StartedHandshakeFuture&lt;F,S&gt; as core::future::future::Future&gt;::poll (31 samples, 0.02%)</title><rect x="30.1376%" y="325" width="0.0191%" height="15" fill="rgb(208,32,45)" fg:x="49020" fg:w="31"/><text x="30.3876%" y="335.50"></text></g><g><title>little-squid-cli`native_tls::imp::TlsConnector::connect (31 samples, 0.02%)</title><rect x="30.1376%" y="309" width="0.0191%" height="15" fill="rgb(207,135,9)" fg:x="49020" fg:w="31"/><text x="30.3876%" y="319.50"></text></g><g><title>little-squid-cli`security_framework::secure_transport::ClientBuilder::handshake (30 samples, 0.02%)</title><rect x="30.1382%" y="293" width="0.0184%" height="15" fill="rgb(206,86,44)" fg:x="49021" fg:w="30"/><text x="30.3882%" y="303.50"></text></g><g><title>little-squid-cli`security_framework::secure_transport::MidHandshakeClientBuilder&lt;S&gt;::handshake (22 samples, 0.01%)</title><rect x="30.1431%" y="277" width="0.0135%" height="15" fill="rgb(245,177,15)" fg:x="49029" fg:w="22"/><text x="30.3931%" y="287.50"></text></g><g><title>Security`SSLHandshake (22 samples, 0.01%)</title><rect x="30.1431%" y="261" width="0.0135%" height="15" fill="rgb(206,64,50)" fg:x="49029" fg:w="22"/><text x="30.3931%" y="271.50"></text></g><g><title>little-squid-cli`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (775 samples, 0.48%)</title><rect x="29.6808%" y="421" width="0.4765%" height="15" fill="rgb(234,36,40)" fg:x="48277" fg:w="775"/><text x="29.9308%" y="431.50"></text></g><g><title>little-squid-cli`&lt;futures_util::future::future::map::Map&lt;Fut,F&gt; as core::future::future::Future&gt;::poll (774 samples, 0.48%)</title><rect x="29.6814%" y="405" width="0.4759%" height="15" fill="rgb(213,64,8)" fg:x="48278" fg:w="774"/><text x="29.9314%" y="415.50"></text></g><g><title>little-squid-cli`&lt;futures_util::future::try_future::try_flatten::TryFlatten&lt;Fut,&lt;Fut as futures_core::future::TryFuture&gt;::Ok&gt; as core::future::future::Future&gt;::poll (780 samples, 0.48%)</title><rect x="29.6790%" y="437" width="0.4795%" height="15" fill="rgb(210,75,36)" fg:x="48274" fg:w="780"/><text x="29.9290%" y="447.50"></text></g><g><title>little-squid-cli`&lt;futures_util::future::select::Select&lt;A,B&gt; as core::future::future::Future&gt;::poll (794 samples, 0.49%)</title><rect x="29.6783%" y="453" width="0.4882%" height="15" fill="rgb(229,88,21)" fg:x="48273" fg:w="794"/><text x="29.9283%" y="463.50"></text></g><g><title>little-squid-cli`&lt;reqwest::async_impl::client::PendingRequest as core::future::future::Future&gt;::poll (820 samples, 0.50%)</title><rect x="29.6703%" y="485" width="0.5041%" height="15" fill="rgb(252,204,47)" fg:x="48260" fg:w="820"/><text x="29.9203%" y="495.50"></text></g><g><title>little-squid-cli`hyper::client::client::Client&lt;C,B&gt;::retryably_send_request::_{{closure}} (813 samples, 0.50%)</title><rect x="29.6746%" y="469" width="0.4998%" height="15" fill="rgb(208,77,27)" fg:x="48267" fg:w="813"/><text x="29.9246%" y="479.50"></text></g><g><title>little-squid-cli`bytes::bytes_mut::shared_v_drop (17 samples, 0.01%)</title><rect x="30.1905%" y="485" width="0.0105%" height="15" fill="rgb(221,76,26)" fg:x="49106" fg:w="17"/><text x="30.4405%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (134 samples, 0.08%)</title><rect x="30.3712%" y="453" width="0.0824%" height="15" fill="rgb(225,139,18)" fg:x="49400" fg:w="134"/><text x="30.6212%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`free (699 samples, 0.43%)</title><rect x="30.4536%" y="453" width="0.4297%" height="15" fill="rgb(230,137,11)" fg:x="49534" fg:w="699"/><text x="30.7036%" y="463.50"></text></g><g><title>little-squid-cli`DYLD-STUB$$free (59 samples, 0.04%)</title><rect x="30.8840%" y="453" width="0.0363%" height="15" fill="rgb(212,28,1)" fg:x="50234" fg:w="59"/><text x="31.1340%" y="463.50"></text></g><g><title>little-squid-cli`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (184 samples, 0.11%)</title><rect x="30.9215%" y="453" width="0.1131%" height="15" fill="rgb(248,164,17)" fg:x="50295" fg:w="184"/><text x="31.1715%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1,416 samples, 0.87%)</title><rect x="31.0875%" y="437" width="0.8706%" height="15" fill="rgb(222,171,42)" fg:x="50565" fg:w="1416"/><text x="31.3375%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (90 samples, 0.06%)</title><rect x="31.9580%" y="437" width="0.0553%" height="15" fill="rgb(243,84,45)" fg:x="51981" fg:w="90"/><text x="32.2080%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`free (1,673 samples, 1.03%)</title><rect x="32.0134%" y="437" width="1.0286%" height="15" fill="rgb(252,49,23)" fg:x="52071" fg:w="1673"/><text x="32.2634%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (56 samples, 0.03%)</title><rect x="33.0419%" y="437" width="0.0344%" height="15" fill="rgb(215,19,7)" fg:x="53744" fg:w="56"/><text x="33.2919%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (217 samples, 0.13%)</title><rect x="33.0763%" y="437" width="0.1334%" height="15" fill="rgb(238,81,41)" fg:x="53800" fg:w="217"/><text x="33.3263%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (204 samples, 0.13%)</title><rect x="33.0843%" y="421" width="0.1254%" height="15" fill="rgb(210,199,37)" fg:x="53813" fg:w="204"/><text x="33.3343%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`madvise (204 samples, 0.13%)</title><rect x="33.0843%" y="405" width="0.1254%" height="15" fill="rgb(244,192,49)" fg:x="53813" fg:w="204"/><text x="33.3343%" y="415.50"></text></g><g><title>little-squid-cli`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (23 samples, 0.01%)</title><rect x="33.2165%" y="437" width="0.0141%" height="15" fill="rgb(226,211,11)" fg:x="54028" fg:w="23"/><text x="33.4665%" y="447.50"></text></g><g><title>little-squid-cli`DYLD-STUB$$free (328 samples, 0.20%)</title><rect x="33.2307%" y="437" width="0.2017%" height="15" fill="rgb(236,162,54)" fg:x="54051" fg:w="328"/><text x="33.4807%" y="447.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wake (418 samples, 0.26%)</title><rect x="36.3840%" y="421" width="0.2570%" height="15" fill="rgb(220,229,9)" fg:x="59180" fg:w="418"/><text x="36.6340%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memset (33 samples, 0.02%)</title><rect x="36.6410%" y="421" width="0.0203%" height="15" fill="rgb(250,87,22)" fg:x="59598" fg:w="33"/><text x="36.8910%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (37 samples, 0.02%)</title><rect x="36.6613%" y="421" width="0.0227%" height="15" fill="rgb(239,43,17)" fg:x="59631" fg:w="37"/><text x="36.9113%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (100 samples, 0.06%)</title><rect x="36.6840%" y="421" width="0.0615%" height="15" fill="rgb(231,177,25)" fg:x="59668" fg:w="100"/><text x="36.9340%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (357 samples, 0.22%)</title><rect x="37.7064%" y="405" width="0.2195%" height="15" fill="rgb(219,179,1)" fg:x="61331" fg:w="357"/><text x="37.9564%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (97 samples, 0.06%)</title><rect x="37.9259%" y="405" width="0.0596%" height="15" fill="rgb(238,219,53)" fg:x="61688" fg:w="97"/><text x="38.1759%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (273 samples, 0.17%)</title><rect x="39.2545%" y="389" width="0.1678%" height="15" fill="rgb(232,167,36)" fg:x="63849" fg:w="273"/><text x="39.5045%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (273 samples, 0.17%)</title><rect x="39.2545%" y="373" width="0.1678%" height="15" fill="rgb(244,19,51)" fg:x="63849" fg:w="273"/><text x="39.5045%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (191 samples, 0.12%)</title><rect x="39.4248%" y="389" width="0.1174%" height="15" fill="rgb(224,6,22)" fg:x="64126" fg:w="191"/><text x="39.6748%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (36 samples, 0.02%)</title><rect x="39.5201%" y="373" width="0.0221%" height="15" fill="rgb(224,145,5)" fg:x="64281" fg:w="36"/><text x="39.7701%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (588 samples, 0.36%)</title><rect x="39.5422%" y="389" width="0.3615%" height="15" fill="rgb(234,130,49)" fg:x="64317" fg:w="588"/><text x="39.7922%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (353 samples, 0.22%)</title><rect x="39.9037%" y="389" width="0.2170%" height="15" fill="rgb(254,6,2)" fg:x="64905" fg:w="353"/><text x="40.1537%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (159 samples, 0.10%)</title><rect x="40.1207%" y="389" width="0.0978%" height="15" fill="rgb(208,96,46)" fg:x="65258" fg:w="159"/><text x="40.3707%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (619 samples, 0.38%)</title><rect x="40.2185%" y="389" width="0.3806%" height="15" fill="rgb(239,3,39)" fg:x="65417" fg:w="619"/><text x="40.4685%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`madvise (453 samples, 0.28%)</title><rect x="40.3206%" y="373" width="0.2785%" height="15" fill="rgb(233,210,1)" fg:x="65583" fg:w="453"/><text x="40.5706%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`madvise (796 samples, 0.49%)</title><rect x="40.6341%" y="373" width="0.4894%" height="15" fill="rgb(244,137,37)" fg:x="66093" fg:w="796"/><text x="40.8841%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (857 samples, 0.53%)</title><rect x="40.5997%" y="389" width="0.5269%" height="15" fill="rgb(240,136,2)" fg:x="66037" fg:w="857"/><text x="40.8497%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (5,091 samples, 3.13%)</title><rect x="37.9972%" y="405" width="3.1300%" height="15" fill="rgb(239,18,37)" fg:x="61804" fg:w="5091"/><text x="38.2472%" y="415.50">lib..</text></g><g><title>libsystem_malloc.dylib`free_tiny (7,231 samples, 4.45%)</title><rect x="36.7455%" y="421" width="4.4456%" height="15" fill="rgb(218,185,22)" fg:x="59768" fg:w="7231"/><text x="36.9955%" y="431.50">libsy..</text></g><g><title>libsystem_platform.dylib`_os_unfair_lock_lock_slow (97 samples, 0.06%)</title><rect x="41.1315%" y="405" width="0.0596%" height="15" fill="rgb(225,218,4)" fg:x="66902" fg:w="97"/><text x="41.3815%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (60 samples, 0.04%)</title><rect x="41.1911%" y="421" width="0.0369%" height="15" fill="rgb(230,182,32)" fg:x="66999" fg:w="60"/><text x="41.4411%" y="431.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1,359 samples, 0.84%)</title><rect x="41.2292%" y="421" width="0.8355%" height="15" fill="rgb(242,56,43)" fg:x="67061" fg:w="1359"/><text x="41.4792%" y="431.50"></text></g><g><title>little-squid-cli`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (14,058 samples, 8.64%)</title><rect x="33.4372%" y="437" width="8.6429%" height="15" fill="rgb(233,99,24)" fg:x="54387" fg:w="14058"/><text x="33.6872%" y="447.50">little-squid..</text></g><g><title>libsystem_platform.dylib`os_unfair_lock_lock_with_options (25 samples, 0.02%)</title><rect x="42.0648%" y="421" width="0.0154%" height="15" fill="rgb(234,209,42)" fg:x="68420" fg:w="25"/><text x="42.3148%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (74 samples, 0.05%)</title><rect x="42.3137%" y="421" width="0.0455%" height="15" fill="rgb(227,7,12)" fg:x="68825" fg:w="74"/><text x="42.5637%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4,272 samples, 2.63%)</title><rect x="42.3592%" y="421" width="2.6264%" height="15" fill="rgb(245,203,43)" fg:x="68899" fg:w="4272"/><text x="42.6092%" y="431.50">li..</text></g><g><title>libsystem_malloc.dylib`_szone_free (82 samples, 0.05%)</title><rect x="44.9857%" y="421" width="0.0504%" height="15" fill="rgb(238,205,33)" fg:x="73171" fg:w="82"/><text x="45.2357%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free (168 samples, 0.10%)</title><rect x="45.0361%" y="421" width="0.1033%" height="15" fill="rgb(231,56,7)" fg:x="73253" fg:w="168"/><text x="45.2861%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (61 samples, 0.04%)</title><rect x="45.1394%" y="421" width="0.0375%" height="15" fill="rgb(244,186,29)" fg:x="73421" fg:w="61"/><text x="45.3894%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (39 samples, 0.02%)</title><rect x="45.1781%" y="405" width="0.0240%" height="15" fill="rgb(234,111,31)" fg:x="73484" fg:w="39"/><text x="45.4281%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1,524 samples, 0.94%)</title><rect x="45.2033%" y="389" width="0.9370%" height="15" fill="rgb(241,149,10)" fg:x="73525" fg:w="1524"/><text x="45.4533%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (1,528 samples, 0.94%)</title><rect x="45.2021%" y="405" width="0.9394%" height="15" fill="rgb(249,206,44)" fg:x="73523" fg:w="1528"/><text x="45.4521%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (1,570 samples, 0.97%)</title><rect x="45.1769%" y="421" width="0.9652%" height="15" fill="rgb(251,153,30)" fg:x="73482" fg:w="1570"/><text x="45.4269%" y="431.50"></text></g><g><title>libsystem_platform.dylib`__bzero (104 samples, 0.06%)</title><rect x="46.1421%" y="421" width="0.0639%" height="15" fill="rgb(239,152,38)" fg:x="75052" fg:w="104"/><text x="46.3921%" y="431.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (254 samples, 0.16%)</title><rect x="46.2067%" y="421" width="0.1562%" height="15" fill="rgb(249,139,47)" fg:x="75157" fg:w="254"/><text x="46.4567%" y="431.50"></text></g><g><title>little-squid-cli`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (17 samples, 0.01%)</title><rect x="46.3634%" y="421" width="0.0105%" height="15" fill="rgb(244,64,35)" fg:x="75412" fg:w="17"/><text x="46.6134%" y="431.50"></text></g><g><title>little-squid-cli`DYLD-STUB$$free (49 samples, 0.03%)</title><rect x="46.3739%" y="421" width="0.0301%" height="15" fill="rgb(216,46,15)" fg:x="75429" fg:w="49"/><text x="46.6239%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wake (345 samples, 0.21%)</title><rect x="46.7625%" y="405" width="0.2121%" height="15" fill="rgb(250,74,19)" fg:x="76061" fg:w="345"/><text x="47.0125%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_memset (31 samples, 0.02%)</title><rect x="46.9746%" y="405" width="0.0191%" height="15" fill="rgb(249,42,33)" fg:x="76406" fg:w="31"/><text x="47.2246%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (27 samples, 0.02%)</title><rect x="46.9936%" y="405" width="0.0166%" height="15" fill="rgb(242,149,17)" fg:x="76437" fg:w="27"/><text x="47.2436%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (156 samples, 0.10%)</title><rect x="47.0102%" y="405" width="0.0959%" height="15" fill="rgb(244,29,21)" fg:x="76464" fg:w="156"/><text x="47.2602%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (505 samples, 0.31%)</title><rect x="47.6115%" y="389" width="0.3105%" height="15" fill="rgb(220,130,37)" fg:x="77442" fg:w="505"/><text x="47.8615%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (95 samples, 0.06%)</title><rect x="47.9220%" y="389" width="0.0584%" height="15" fill="rgb(211,67,2)" fg:x="77947" fg:w="95"/><text x="48.1720%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (17 samples, 0.01%)</title><rect x="47.9828%" y="389" width="0.0105%" height="15" fill="rgb(235,68,52)" fg:x="78046" fg:w="17"/><text x="48.2328%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (274 samples, 0.17%)</title><rect x="49.0384%" y="373" width="0.1685%" height="15" fill="rgb(246,142,3)" fg:x="79763" fg:w="274"/><text x="49.2884%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (274 samples, 0.17%)</title><rect x="49.0384%" y="357" width="0.1685%" height="15" fill="rgb(241,25,7)" fg:x="79763" fg:w="274"/><text x="49.2884%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (201 samples, 0.12%)</title><rect x="49.2087%" y="373" width="0.1236%" height="15" fill="rgb(242,119,39)" fg:x="80040" fg:w="201"/><text x="49.4587%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (31 samples, 0.02%)</title><rect x="49.3133%" y="357" width="0.0191%" height="15" fill="rgb(241,98,45)" fg:x="80210" fg:w="31"/><text x="49.5633%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (613 samples, 0.38%)</title><rect x="49.3323%" y="373" width="0.3769%" height="15" fill="rgb(254,28,30)" fg:x="80241" fg:w="613"/><text x="49.5823%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (342 samples, 0.21%)</title><rect x="49.7092%" y="373" width="0.2103%" height="15" fill="rgb(241,142,54)" fg:x="80854" fg:w="342"/><text x="49.9592%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (164 samples, 0.10%)</title><rect x="49.9195%" y="373" width="0.1008%" height="15" fill="rgb(222,85,15)" fg:x="81196" fg:w="164"/><text x="50.1695%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (656 samples, 0.40%)</title><rect x="50.0203%" y="373" width="0.4033%" height="15" fill="rgb(210,85,47)" fg:x="81360" fg:w="656"/><text x="50.2703%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`madvise (493 samples, 0.30%)</title><rect x="50.1205%" y="357" width="0.3031%" height="15" fill="rgb(224,206,25)" fg:x="81523" fg:w="493"/><text x="50.3705%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`madvise (875 samples, 0.54%)</title><rect x="50.4617%" y="357" width="0.5380%" height="15" fill="rgb(243,201,19)" fg:x="82078" fg:w="875"/><text x="50.7117%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (939 samples, 0.58%)</title><rect x="50.4248%" y="373" width="0.5773%" height="15" fill="rgb(236,59,4)" fg:x="82018" fg:w="939"/><text x="50.6748%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (4,897 samples, 3.01%)</title><rect x="47.9933%" y="389" width="3.0107%" height="15" fill="rgb(254,179,45)" fg:x="78063" fg:w="4897"/><text x="48.2433%" y="399.50">lib..</text></g><g><title>libsystem_malloc.dylib`free_tiny (6,479 samples, 3.98%)</title><rect x="47.1061%" y="405" width="3.9833%" height="15" fill="rgb(226,14,10)" fg:x="76620" fg:w="6479"/><text x="47.3561%" y="415.50">libs..</text></g><g><title>libsystem_platform.dylib`_os_unfair_lock_lock_slow (135 samples, 0.08%)</title><rect x="51.0064%" y="389" width="0.0830%" height="15" fill="rgb(244,27,41)" fg:x="82964" fg:w="135"/><text x="51.2564%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (60 samples, 0.04%)</title><rect x="51.0894%" y="405" width="0.0369%" height="15" fill="rgb(235,35,32)" fg:x="83099" fg:w="60"/><text x="51.3394%" y="415.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1,001 samples, 0.62%)</title><rect x="51.1269%" y="405" width="0.6154%" height="15" fill="rgb(218,68,31)" fg:x="83160" fg:w="1001"/><text x="51.3769%" y="415.50"></text></g><g><title>little-squid-cli`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (8,735 samples, 5.37%)</title><rect x="46.4040%" y="421" width="5.3703%" height="15" fill="rgb(207,120,37)" fg:x="75478" fg:w="8735"/><text x="46.6540%" y="431.50">little-..</text></g><g><title>libsystem_platform.dylib`os_unfair_lock_lock_with_options (52 samples, 0.03%)</title><rect x="51.7423%" y="405" width="0.0320%" height="15" fill="rgb(227,98,0)" fg:x="84161" fg:w="52"/><text x="51.9923%" y="415.50"></text></g><g><title>little-squid-cli`core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (33,877 samples, 20.83%)</title><rect x="31.0346%" y="453" width="20.8276%" height="15" fill="rgb(207,7,3)" fg:x="50479" fg:w="33877"/><text x="31.2846%" y="463.50">little-squid-cli`core::ptr::drop_..</text></g><g><title>little-squid-cli`core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (15,911 samples, 9.78%)</title><rect x="42.0801%" y="437" width="9.7821%" height="15" fill="rgb(206,98,19)" fg:x="68445" fg:w="15911"/><text x="42.3301%" y="447.50">little-squid-c..</text></g><g><title>little-squid-cli`core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (143 samples, 0.09%)</title><rect x="51.7743%" y="421" width="0.0879%" height="15" fill="rgb(217,5,26)" fg:x="84213" fg:w="143"/><text x="52.0243%" y="431.50"></text></g><g><title>little-squid-cli`&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (35,291 samples, 21.70%)</title><rect x="30.2058%" y="469" width="21.6970%" height="15" fill="rgb(235,190,38)" fg:x="49131" fg:w="35291"/><text x="30.4558%" y="479.50">little-squid-cli`&lt;alloc::vec::Vec&lt;..</text></g><g><title>little-squid-cli`core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (66 samples, 0.04%)</title><rect x="51.8622%" y="453" width="0.0406%" height="15" fill="rgb(247,86,24)" fg:x="84356" fg:w="66"/><text x="52.1122%" y="463.50"></text></g><g><title>little-squid-cli`core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (35,351 samples, 21.73%)</title><rect x="30.2058%" y="485" width="21.7339%" height="15" fill="rgb(205,101,16)" fg:x="49131" fg:w="35351"/><text x="30.4558%" y="495.50">little-squid-cli`core::ptr::drop_i..</text></g><g><title>little-squid-cli`core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,serde_json::value::Value&gt;&gt; (60 samples, 0.04%)</title><rect x="51.9028%" y="469" width="0.0369%" height="15" fill="rgb(246,168,33)" fg:x="84422" fg:w="60"/><text x="52.1528%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (35 samples, 0.02%)</title><rect x="52.0049%" y="469" width="0.0215%" height="15" fill="rgb(231,114,1)" fg:x="84588" fg:w="35"/><text x="52.2549%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (23 samples, 0.01%)</title><rect x="52.0264%" y="469" width="0.0141%" height="15" fill="rgb(207,184,53)" fg:x="84623" fg:w="23"/><text x="52.2764%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`free (92 samples, 0.06%)</title><rect x="52.0405%" y="469" width="0.0566%" height="15" fill="rgb(224,95,51)" fg:x="84646" fg:w="92"/><text x="52.2905%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (30 samples, 0.02%)</title><rect x="52.1051%" y="469" width="0.0184%" height="15" fill="rgb(212,188,45)" fg:x="84751" fg:w="30"/><text x="52.3551%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (149 samples, 0.09%)</title><rect x="52.4918%" y="453" width="0.0916%" height="15" fill="rgb(223,154,38)" fg:x="85380" fg:w="149"/><text x="52.7418%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (184 samples, 0.11%)</title><rect x="52.5865%" y="453" width="0.1131%" height="15" fill="rgb(251,22,52)" fg:x="85534" fg:w="184"/><text x="52.8365%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (433 samples, 0.27%)</title><rect x="52.7187%" y="437" width="0.2662%" height="15" fill="rgb(229,209,22)" fg:x="85749" fg:w="433"/><text x="52.9687%" y="447.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (139 samples, 0.09%)</title><rect x="53.2222%" y="421" width="0.0855%" height="15" fill="rgb(234,138,34)" fg:x="86568" fg:w="139"/><text x="53.4722%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wake (62 samples, 0.04%)</title><rect x="53.3076%" y="421" width="0.0381%" height="15" fill="rgb(212,95,11)" fg:x="86707" fg:w="62"/><text x="53.5576%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (281 samples, 0.17%)</title><rect x="53.3531%" y="421" width="0.1728%" height="15" fill="rgb(240,179,47)" fg:x="86781" fg:w="281"/><text x="53.6031%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (30 samples, 0.02%)</title><rect x="53.7712%" y="405" width="0.0184%" height="15" fill="rgb(240,163,11)" fg:x="87461" fg:w="30"/><text x="54.0212%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (431 samples, 0.26%)</title><rect x="53.5277%" y="421" width="0.2650%" height="15" fill="rgb(236,37,12)" fg:x="87065" fg:w="431"/><text x="53.7777%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1,346 samples, 0.83%)</title><rect x="52.9849%" y="437" width="0.8275%" height="15" fill="rgb(232,164,16)" fg:x="86182" fg:w="1346"/><text x="53.2349%" y="447.50"></text></g><g><title>libsystem_platform.dylib`_os_unfair_lock_lock_slow (32 samples, 0.02%)</title><rect x="53.7927%" y="421" width="0.0197%" height="15" fill="rgb(244,205,15)" fg:x="87496" fg:w="32"/><text x="54.0427%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1,839 samples, 1.13%)</title><rect x="52.7002%" y="453" width="1.1306%" height="15" fill="rgb(223,117,47)" fg:x="85719" fg:w="1839"/><text x="52.9502%" y="463.50"></text></g><g><title>libsystem_platform.dylib`os_unfair_lock_lock_with_options (29 samples, 0.02%)</title><rect x="53.8130%" y="437" width="0.0178%" height="15" fill="rgb(244,107,35)" fg:x="87529" fg:w="29"/><text x="54.0630%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (21 samples, 0.01%)</title><rect x="53.8308%" y="453" width="0.0129%" height="15" fill="rgb(205,140,8)" fg:x="87558" fg:w="21"/><text x="54.0808%" y="463.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (126 samples, 0.08%)</title><rect x="53.8437%" y="453" width="0.0775%" height="15" fill="rgb(228,84,46)" fg:x="87579" fg:w="126"/><text x="54.0937%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (187 samples, 0.11%)</title><rect x="54.1235%" y="437" width="0.1150%" height="15" fill="rgb(254,188,9)" fg:x="88034" fg:w="187"/><text x="54.3735%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (663 samples, 0.41%)</title><rect x="54.2403%" y="437" width="0.4076%" height="15" fill="rgb(206,112,54)" fg:x="88224" fg:w="663"/><text x="54.4903%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (76 samples, 0.05%)</title><rect x="54.6707%" y="421" width="0.0467%" height="15" fill="rgb(216,84,49)" fg:x="88924" fg:w="76"/><text x="54.9207%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (76 samples, 0.05%)</title><rect x="54.8287%" y="405" width="0.0467%" height="15" fill="rgb(214,194,35)" fg:x="89181" fg:w="76"/><text x="55.0787%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wake (104 samples, 0.06%)</title><rect x="54.8754%" y="405" width="0.0639%" height="15" fill="rgb(249,28,3)" fg:x="89257" fg:w="104"/><text x="55.1254%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (137 samples, 0.08%)</title><rect x="54.9430%" y="405" width="0.0842%" height="15" fill="rgb(222,56,52)" fg:x="89367" fg:w="137"/><text x="55.1930%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (25 samples, 0.02%)</title><rect x="55.1945%" y="389" width="0.0154%" height="15" fill="rgb(245,217,50)" fg:x="89776" fg:w="25"/><text x="55.4445%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (298 samples, 0.18%)</title><rect x="55.0291%" y="405" width="0.1832%" height="15" fill="rgb(213,201,24)" fg:x="89507" fg:w="298"/><text x="55.2791%" y="415.50"></text></g><g><title>libsystem_platform.dylib`_os_unfair_lock_lock_slow (28 samples, 0.02%)</title><rect x="55.2129%" y="405" width="0.0172%" height="15" fill="rgb(248,116,28)" fg:x="89806" fg:w="28"/><text x="55.4629%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (835 samples, 0.51%)</title><rect x="54.7174%" y="421" width="0.5134%" height="15" fill="rgb(219,72,43)" fg:x="89000" fg:w="835"/><text x="54.9674%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (957 samples, 0.59%)</title><rect x="54.6479%" y="437" width="0.5884%" height="15" fill="rgb(209,138,14)" fg:x="88887" fg:w="957"/><text x="54.8979%" y="447.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1,014 samples, 0.62%)</title><rect x="55.2443%" y="437" width="0.6234%" height="15" fill="rgb(222,18,33)" fg:x="89857" fg:w="1014"/><text x="55.4943%" y="447.50"></text></g><g><title>little-squid-cli`&lt;alloc::string::String as core::clone::Clone&gt;::clone (500 samples, 0.31%)</title><rect x="55.8677%" y="437" width="0.3074%" height="15" fill="rgb(213,199,7)" fg:x="90871" fg:w="500"/><text x="56.1177%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (382 samples, 0.23%)</title><rect x="55.9402%" y="421" width="0.2349%" height="15" fill="rgb(250,110,10)" fg:x="90989" fg:w="382"/><text x="56.1902%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (138 samples, 0.08%)</title><rect x="56.0902%" y="405" width="0.0848%" height="15" fill="rgb(248,123,6)" fg:x="91233" fg:w="138"/><text x="56.3402%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (20 samples, 0.01%)</title><rect x="56.1628%" y="389" width="0.0123%" height="15" fill="rgb(206,91,31)" fg:x="91351" fg:w="20"/><text x="56.4128%" y="399.50"></text></g><g><title>little-squid-cli`DYLD-STUB$$malloc (27 samples, 0.02%)</title><rect x="56.1751%" y="437" width="0.0166%" height="15" fill="rgb(211,154,13)" fg:x="91371" fg:w="27"/><text x="56.4251%" y="447.50"></text></g><g><title>little-squid-cli`DYLD-STUB$$memcpy (21 samples, 0.01%)</title><rect x="56.1917%" y="437" width="0.0129%" height="15" fill="rgb(225,148,7)" fg:x="91398" fg:w="21"/><text x="56.4417%" y="447.50"></text></g><g><title>little-squid-cli`__rdl_alloc (77 samples, 0.05%)</title><rect x="56.2046%" y="437" width="0.0473%" height="15" fill="rgb(220,160,43)" fg:x="91419" fg:w="77"/><text x="56.4546%" y="447.50"></text></g><g><title>little-squid-cli`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3,792 samples, 2.33%)</title><rect x="53.9212%" y="453" width="2.3313%" height="15" fill="rgb(213,52,39)" fg:x="87705" fg:w="3792"/><text x="54.1712%" y="463.50">l..</text></g><g><title>little-squid-cli`&lt;alloc::string::String as core::clone::Clone&gt;::clone (146 samples, 0.09%)</title><rect x="56.2525%" y="453" width="0.0898%" height="15" fill="rgb(243,137,7)" fg:x="91497" fg:w="146"/><text x="56.5025%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (47 samples, 0.03%)</title><rect x="56.3134%" y="437" width="0.0289%" height="15" fill="rgb(230,79,13)" fg:x="91596" fg:w="47"/><text x="56.5634%" y="447.50"></text></g><g><title>little-squid-cli`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (29 samples, 0.02%)</title><rect x="56.3423%" y="453" width="0.0178%" height="15" fill="rgb(247,105,23)" fg:x="91643" fg:w="29"/><text x="56.5923%" y="463.50"></text></g><g><title>little-squid-cli`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (6,957 samples, 4.28%)</title><rect x="52.1241%" y="469" width="4.2772%" height="15" fill="rgb(223,179,41)" fg:x="84782" fg:w="6957"/><text x="52.3741%" y="479.50">littl..</text></g><g><title>little-squid-cli`__rdl_alloc (43 samples, 0.03%)</title><rect x="56.3749%" y="453" width="0.0264%" height="15" fill="rgb(218,9,34)" fg:x="91696" fg:w="43"/><text x="56.6249%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (273 samples, 0.17%)</title><rect x="56.4321%" y="453" width="0.1678%" height="15" fill="rgb(222,106,8)" fg:x="91789" fg:w="273"/><text x="56.6821%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (24 samples, 0.01%)</title><rect x="56.5999%" y="453" width="0.0148%" height="15" fill="rgb(211,220,0)" fg:x="92062" fg:w="24"/><text x="56.8499%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`free (411 samples, 0.25%)</title><rect x="56.6147%" y="453" width="0.2527%" height="15" fill="rgb(229,52,16)" fg:x="92086" fg:w="411"/><text x="56.8647%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (91 samples, 0.06%)</title><rect x="56.8747%" y="453" width="0.0559%" height="15" fill="rgb(212,155,18)" fg:x="92509" fg:w="91"/><text x="57.1247%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (80 samples, 0.05%)</title><rect x="56.8815%" y="437" width="0.0492%" height="15" fill="rgb(242,21,14)" fg:x="92520" fg:w="80"/><text x="57.1315%" y="447.50"></text></g><g><title>libsystem_kernel.dylib`madvise (80 samples, 0.05%)</title><rect x="56.8815%" y="421" width="0.0492%" height="15" fill="rgb(222,19,48)" fg:x="92520" fg:w="80"/><text x="57.1315%" y="431.50"></text></g><g><title>little-squid-cli`DYLD-STUB$$free (81 samples, 0.05%)</title><rect x="56.9460%" y="453" width="0.0498%" height="15" fill="rgb(232,45,27)" fg:x="92625" fg:w="81"/><text x="57.1960%" y="463.50"></text></g><g><title>little-squid-cli`__rdl_dealloc (53 samples, 0.03%)</title><rect x="56.9958%" y="453" width="0.0326%" height="15" fill="rgb(249,103,42)" fg:x="92706" fg:w="53"/><text x="57.2458%" y="463.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wake (423 samples, 0.26%)</title><rect x="57.1428%" y="437" width="0.2601%" height="15" fill="rgb(246,81,33)" fg:x="92945" fg:w="423"/><text x="57.3928%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (32 samples, 0.02%)</title><rect x="57.4102%" y="437" width="0.0197%" height="15" fill="rgb(252,33,42)" fg:x="93380" fg:w="32"/><text x="57.6602%" y="447.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (318 samples, 0.20%)</title><rect x="57.6906%" y="421" width="0.1955%" height="15" fill="rgb(209,212,41)" fg:x="93836" fg:w="318"/><text x="57.9406%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (31 samples, 0.02%)</title><rect x="58.0533%" y="405" width="0.0191%" height="15" fill="rgb(207,154,6)" fg:x="94426" fg:w="31"/><text x="58.3033%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (30 samples, 0.02%)</title><rect x="58.0539%" y="389" width="0.0184%" height="15" fill="rgb(223,64,47)" fg:x="94427" fg:w="30"/><text x="58.3039%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (133 samples, 0.08%)</title><rect x="58.0791%" y="405" width="0.0818%" height="15" fill="rgb(211,161,38)" fg:x="94468" fg:w="133"/><text x="58.3291%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (177 samples, 0.11%)</title><rect x="58.1609%" y="405" width="0.1088%" height="15" fill="rgb(219,138,40)" fg:x="94601" fg:w="177"/><text x="58.4109%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (48 samples, 0.03%)</title><rect x="58.2758%" y="405" width="0.0295%" height="15" fill="rgb(241,228,46)" fg:x="94788" fg:w="48"/><text x="58.5258%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`madvise (39 samples, 0.02%)</title><rect x="58.2814%" y="389" width="0.0240%" height="15" fill="rgb(223,209,38)" fg:x="94797" fg:w="39"/><text x="58.5314%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (731 samples, 0.45%)</title><rect x="57.8996%" y="421" width="0.4494%" height="15" fill="rgb(236,164,45)" fg:x="94176" fg:w="731"/><text x="58.1496%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`tiny_madvise_free_range_no_lock (71 samples, 0.04%)</title><rect x="58.3054%" y="405" width="0.0437%" height="15" fill="rgb(231,15,5)" fg:x="94836" fg:w="71"/><text x="58.5554%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`madvise (70 samples, 0.04%)</title><rect x="58.3060%" y="389" width="0.0430%" height="15" fill="rgb(252,35,15)" fg:x="94837" fg:w="70"/><text x="58.5560%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1,580 samples, 0.97%)</title><rect x="57.4299%" y="437" width="0.9714%" height="15" fill="rgb(248,181,18)" fg:x="93412" fg:w="1580"/><text x="57.6799%" y="447.50"></text></g><g><title>libsystem_platform.dylib`_os_unfair_lock_lock_slow (83 samples, 0.05%)</title><rect x="58.3502%" y="421" width="0.0510%" height="15" fill="rgb(233,39,42)" fg:x="94909" fg:w="83"/><text x="58.6002%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (23 samples, 0.01%)</title><rect x="58.4013%" y="437" width="0.0141%" height="15" fill="rgb(238,110,33)" fg:x="94992" fg:w="23"/><text x="58.6513%" y="447.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (148 samples, 0.09%)</title><rect x="58.4191%" y="437" width="0.0910%" height="15" fill="rgb(233,195,10)" fg:x="95021" fg:w="148"/><text x="58.6691%" y="447.50"></text></g><g><title>little-squid-cli`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2,422 samples, 1.49%)</title><rect x="57.0290%" y="453" width="1.4891%" height="15" fill="rgb(254,105,3)" fg:x="92760" fg:w="2422"/><text x="57.2790%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (17 samples, 0.01%)</title><rect x="58.6072%" y="437" width="0.0105%" height="15" fill="rgb(221,225,9)" fg:x="95327" fg:w="17"/><text x="58.8572%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (793 samples, 0.49%)</title><rect x="58.6177%" y="437" width="0.4875%" height="15" fill="rgb(224,227,45)" fg:x="95344" fg:w="793"/><text x="58.8677%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (18 samples, 0.01%)</title><rect x="59.1052%" y="437" width="0.0111%" height="15" fill="rgb(229,198,43)" fg:x="96137" fg:w="18"/><text x="59.3552%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`free (47 samples, 0.03%)</title><rect x="59.1163%" y="437" width="0.0289%" height="15" fill="rgb(206,209,35)" fg:x="96155" fg:w="47"/><text x="59.3663%" y="447.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (103 samples, 0.06%)</title><rect x="59.1562%" y="421" width="0.0633%" height="15" fill="rgb(245,195,53)" fg:x="96220" fg:w="103"/><text x="59.4062%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block_locked (532 samples, 0.33%)</title><rect x="59.2196%" y="421" width="0.3271%" height="15" fill="rgb(240,92,26)" fg:x="96323" fg:w="532"/><text x="59.4696%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`madvise (532 samples, 0.33%)</title><rect x="59.2196%" y="405" width="0.3271%" height="15" fill="rgb(207,40,23)" fg:x="96323" fg:w="532"/><text x="59.4696%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_madvise_block (638 samples, 0.39%)</title><rect x="59.1550%" y="437" width="0.3922%" height="15" fill="rgb(223,111,35)" fg:x="96218" fg:w="638"/><text x="59.4050%" y="447.50"></text></g><g><title>libsystem_platform.dylib`__bzero (21 samples, 0.01%)</title><rect x="59.5473%" y="437" width="0.0129%" height="15" fill="rgb(229,147,28)" fg:x="96856" fg:w="21"/><text x="59.7973%" y="447.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wake (167 samples, 0.10%)</title><rect x="59.6973%" y="421" width="0.1027%" height="15" fill="rgb(211,29,28)" fg:x="97100" fg:w="167"/><text x="59.9473%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (31 samples, 0.02%)</title><rect x="59.8049%" y="421" width="0.0191%" height="15" fill="rgb(228,72,33)" fg:x="97275" fg:w="31"/><text x="60.0549%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (432 samples, 0.27%)</title><rect x="60.0588%" y="405" width="0.2656%" height="15" fill="rgb(205,214,31)" fg:x="97688" fg:w="432"/><text x="60.3088%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`get_tiny_previous_free_msize (18 samples, 0.01%)</title><rect x="60.3244%" y="405" width="0.0111%" height="15" fill="rgb(224,111,15)" fg:x="98120" fg:w="18"/><text x="60.5744%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (20 samples, 0.01%)</title><rect x="60.4209%" y="389" width="0.0123%" height="15" fill="rgb(253,21,26)" fg:x="98277" fg:w="20"/><text x="60.6709%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (20 samples, 0.01%)</title><rect x="60.4209%" y="373" width="0.0123%" height="15" fill="rgb(245,139,43)" fg:x="98277" fg:w="20"/><text x="60.6709%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (142 samples, 0.09%)</title><rect x="60.4381%" y="389" width="0.0873%" height="15" fill="rgb(252,170,7)" fg:x="98305" fg:w="142"/><text x="60.6881%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (46 samples, 0.03%)</title><rect x="60.5377%" y="389" width="0.0283%" height="15" fill="rgb(231,118,14)" fg:x="98467" fg:w="46"/><text x="60.7877%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`madvise (40 samples, 0.02%)</title><rect x="60.5414%" y="373" width="0.0246%" height="15" fill="rgb(238,83,0)" fg:x="98473" fg:w="40"/><text x="60.7914%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (370 samples, 0.23%)</title><rect x="60.3391%" y="405" width="0.2275%" height="15" fill="rgb(221,39,39)" fg:x="98144" fg:w="370"/><text x="60.5891%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1,363 samples, 0.84%)</title><rect x="59.8239%" y="421" width="0.8380%" height="15" fill="rgb(222,119,46)" fg:x="97306" fg:w="1363"/><text x="60.0739%" y="431.50"></text></g><g><title>libsystem_platform.dylib`_os_unfair_lock_lock_slow (155 samples, 0.10%)</title><rect x="60.5666%" y="405" width="0.0953%" height="15" fill="rgb(222,165,49)" fg:x="98514" fg:w="155"/><text x="60.8166%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (18 samples, 0.01%)</title><rect x="60.6619%" y="421" width="0.0111%" height="15" fill="rgb(219,113,52)" fg:x="98669" fg:w="18"/><text x="60.9119%" y="431.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (61 samples, 0.04%)</title><rect x="60.6760%" y="421" width="0.0375%" height="15" fill="rgb(214,7,15)" fg:x="98692" fg:w="61"/><text x="60.9260%" y="431.50"></text></g><g><title>little-squid-cli`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (1,897 samples, 1.17%)</title><rect x="59.5805%" y="437" width="1.1663%" height="15" fill="rgb(235,32,4)" fg:x="96910" fg:w="1897"/><text x="59.8305%" y="447.50"></text></g><g><title>libsystem_platform.dylib`os_unfair_lock_lock_with_options (54 samples, 0.03%)</title><rect x="60.7135%" y="421" width="0.0332%" height="15" fill="rgb(238,90,54)" fg:x="98753" fg:w="54"/><text x="60.9635%" y="431.50"></text></g><g><title>little-squid-cli`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (7,104 samples, 4.37%)</title><rect x="56.4013%" y="469" width="4.3676%" height="15" fill="rgb(213,208,19)" fg:x="91739" fg:w="7104"/><text x="56.6513%" y="479.50">littl..</text></g><g><title>little-squid-cli`core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (3,661 samples, 2.25%)</title><rect x="58.5181%" y="453" width="2.2508%" height="15" fill="rgb(233,156,4)" fg:x="95182" fg:w="3661"/><text x="58.7681%" y="463.50">l..</text></g><g><title>little-squid-cli`core::ptr::drop_in_place&lt;serde_json::value::Value&gt; (36 samples, 0.02%)</title><rect x="60.7467%" y="437" width="0.0221%" height="15" fill="rgb(207,194,5)" fg:x="98807" fg:w="36"/><text x="60.9967%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (20 samples, 0.01%)</title><rect x="60.8494%" y="453" width="0.0123%" height="15" fill="rgb(206,111,30)" fg:x="98974" fg:w="20"/><text x="61.0994%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (19 samples, 0.01%)</title><rect x="60.8617%" y="453" width="0.0117%" height="15" fill="rgb(243,70,54)" fg:x="98994" fg:w="19"/><text x="61.1117%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (95 samples, 0.06%)</title><rect x="61.2613%" y="437" width="0.0584%" height="15" fill="rgb(242,28,8)" fg:x="99644" fg:w="95"/><text x="61.5113%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (115 samples, 0.07%)</title><rect x="61.3216%" y="437" width="0.0707%" height="15" fill="rgb(219,106,18)" fg:x="99742" fg:w="115"/><text x="61.5716%" y="447.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (89 samples, 0.05%)</title><rect x="61.4968%" y="405" width="0.0547%" height="15" fill="rgb(244,222,10)" fg:x="100027" fg:w="89"/><text x="61.7468%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wake (29 samples, 0.02%)</title><rect x="61.5515%" y="405" width="0.0178%" height="15" fill="rgb(236,179,52)" fg:x="100116" fg:w="29"/><text x="61.8015%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (73 samples, 0.04%)</title><rect x="61.5792%" y="405" width="0.0449%" height="15" fill="rgb(213,23,39)" fg:x="100161" fg:w="73"/><text x="61.8292%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (20 samples, 0.01%)</title><rect x="61.7710%" y="389" width="0.0123%" height="15" fill="rgb(238,48,10)" fg:x="100473" fg:w="20"/><text x="62.0210%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (259 samples, 0.16%)</title><rect x="61.6253%" y="405" width="0.1592%" height="15" fill="rgb(251,196,23)" fg:x="100236" fg:w="259"/><text x="61.8753%" y="415.50"></text></g><g><title>libsystem_platform.dylib`_os_unfair_lock_lock_slow (35 samples, 0.02%)</title><rect x="61.7845%" y="405" width="0.0215%" height="15" fill="rgb(250,152,24)" fg:x="100495" fg:w="35"/><text x="62.0345%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (626 samples, 0.38%)</title><rect x="61.4218%" y="421" width="0.3849%" height="15" fill="rgb(209,150,17)" fg:x="99905" fg:w="626"/><text x="61.6718%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (686 samples, 0.42%)</title><rect x="61.3923%" y="437" width="0.4218%" height="15" fill="rgb(234,202,34)" fg:x="99857" fg:w="686"/><text x="61.6423%" y="447.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (81 samples, 0.05%)</title><rect x="61.8208%" y="437" width="0.0498%" height="15" fill="rgb(253,148,53)" fg:x="100554" fg:w="81"/><text x="62.0708%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (277 samples, 0.17%)</title><rect x="62.5598%" y="421" width="0.1703%" height="15" fill="rgb(218,129,16)" fg:x="101756" fg:w="277"/><text x="62.8098%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (639 samples, 0.39%)</title><rect x="62.7319%" y="421" width="0.3929%" height="15" fill="rgb(216,85,19)" fg:x="102036" fg:w="639"/><text x="62.9819%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (80 samples, 0.05%)</title><rect x="63.2355%" y="405" width="0.0492%" height="15" fill="rgb(235,228,7)" fg:x="102855" fg:w="80"/><text x="63.4855%" y="415.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (52 samples, 0.03%)</title><rect x="63.3830%" y="389" width="0.0320%" height="15" fill="rgb(245,175,0)" fg:x="103095" fg:w="52"/><text x="63.6330%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wake (62 samples, 0.04%)</title><rect x="63.4150%" y="389" width="0.0381%" height="15" fill="rgb(208,168,36)" fg:x="103147" fg:w="62"/><text x="63.6650%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (101 samples, 0.06%)</title><rect x="63.4623%" y="389" width="0.0621%" height="15" fill="rgb(246,171,24)" fg:x="103224" fg:w="101"/><text x="63.7123%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (18 samples, 0.01%)</title><rect x="63.6670%" y="373" width="0.0111%" height="15" fill="rgb(215,142,24)" fg:x="103557" fg:w="18"/><text x="63.9170%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (249 samples, 0.15%)</title><rect x="63.5263%" y="389" width="0.1531%" height="15" fill="rgb(250,187,7)" fg:x="103328" fg:w="249"/><text x="63.7763%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (655 samples, 0.40%)</title><rect x="63.2846%" y="405" width="0.4027%" height="15" fill="rgb(228,66,33)" fg:x="102935" fg:w="655"/><text x="63.5346%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (921 samples, 0.57%)</title><rect x="63.1248%" y="421" width="0.5662%" height="15" fill="rgb(234,215,21)" fg:x="102675" fg:w="921"/><text x="63.3748%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (45 samples, 0.03%)</title><rect x="63.6910%" y="421" width="0.0277%" height="15" fill="rgb(222,191,20)" fg:x="103596" fg:w="45"/><text x="63.9410%" y="431.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (810 samples, 0.50%)</title><rect x="63.7187%" y="421" width="0.4980%" height="15" fill="rgb(245,79,54)" fg:x="103641" fg:w="810"/><text x="63.9687%" y="431.50"></text></g><g><title>little-squid-cli`&lt;alloc::string::String as core::clone::Clone&gt;::clone (663 samples, 0.41%)</title><rect x="64.2167%" y="421" width="0.4076%" height="15" fill="rgb(240,10,37)" fg:x="104451" fg:w="663"/><text x="64.4667%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (450 samples, 0.28%)</title><rect x="64.3476%" y="405" width="0.2767%" height="15" fill="rgb(214,192,32)" fg:x="104664" fg:w="450"/><text x="64.5976%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (191 samples, 0.12%)</title><rect x="64.5069%" y="389" width="0.1174%" height="15" fill="rgb(209,36,54)" fg:x="104923" fg:w="191"/><text x="64.7569%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (19 samples, 0.01%)</title><rect x="64.6126%" y="373" width="0.0117%" height="15" fill="rgb(220,10,11)" fg:x="105095" fg:w="19"/><text x="64.8626%" y="383.50"></text></g><g><title>little-squid-cli`DYLD-STUB$$malloc (27 samples, 0.02%)</title><rect x="64.6243%" y="421" width="0.0166%" height="15" fill="rgb(221,106,17)" fg:x="105114" fg:w="27"/><text x="64.8743%" y="431.50"></text></g><g><title>little-squid-cli`DYLD-STUB$$memcpy (41 samples, 0.03%)</title><rect x="64.6409%" y="421" width="0.0252%" height="15" fill="rgb(251,142,44)" fg:x="105141" fg:w="41"/><text x="64.8909%" y="431.50"></text></g><g><title>little-squid-cli`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4,616 samples, 2.84%)</title><rect x="61.8706%" y="437" width="2.8379%" height="15" fill="rgb(238,13,15)" fg:x="100635" fg:w="4616"/><text x="62.1206%" y="447.50">li..</text></g><g><title>little-squid-cli`__rdl_alloc (69 samples, 0.04%)</title><rect x="64.6661%" y="421" width="0.0424%" height="15" fill="rgb(208,107,27)" fg:x="105182" fg:w="69"/><text x="64.9161%" y="431.50"></text></g><g><title>little-squid-cli`&lt;alloc::string::String as core::clone::Clone&gt;::clone (195 samples, 0.12%)</title><rect x="64.7085%" y="437" width="0.1199%" height="15" fill="rgb(205,136,37)" fg:x="105251" fg:w="195"/><text x="64.9585%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (59 samples, 0.04%)</title><rect x="64.7921%" y="421" width="0.0363%" height="15" fill="rgb(250,205,27)" fg:x="105387" fg:w="59"/><text x="65.0421%" y="431.50"></text></g><g><title>little-squid-cli`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (17 samples, 0.01%)</title><rect x="64.8284%" y="437" width="0.0105%" height="15" fill="rgb(210,80,43)" fg:x="105446" fg:w="17"/><text x="65.0784%" y="447.50"></text></g><g><title>little-squid-cli`&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (6,500 samples, 4.00%)</title><rect x="60.8752%" y="453" width="3.9962%" height="15" fill="rgb(247,160,36)" fg:x="99016" fg:w="6500"/><text x="61.1252%" y="463.50">litt..</text></g><g><title>little-squid-cli`__rdl_alloc (38 samples, 0.02%)</title><rect x="64.8481%" y="437" width="0.0234%" height="15" fill="rgb(234,13,49)" fg:x="105478" fg:w="38"/><text x="65.0981%" y="447.50"></text></g><g><title>little-squid-cli`&lt;alloc::string::String as core::clone::Clone&gt;::clone (17 samples, 0.01%)</title><rect x="64.8714%" y="453" width="0.0105%" height="15" fill="rgb(234,122,0)" fg:x="105516" fg:w="17"/><text x="65.1214%" y="463.50"></text></g><g><title>little-squid-cli`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (29 samples, 0.02%)</title><rect x="64.8819%" y="453" width="0.0178%" height="15" fill="rgb(207,146,38)" fg:x="105533" fg:w="29"/><text x="65.1319%" y="463.50"></text></g><g><title>little-squid-cli`&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (6,708 samples, 4.12%)</title><rect x="60.7787%" y="469" width="4.1241%" height="15" fill="rgb(207,177,25)" fg:x="98859" fg:w="6708"/><text x="61.0287%" y="479.50">litt..</text></g><g><title>little-squid-cli`DYLD-STUB$$free (23 samples, 0.01%)</title><rect x="64.9028%" y="469" width="0.0141%" height="15" fill="rgb(211,178,42)" fg:x="105567" fg:w="23"/><text x="65.1528%" y="479.50"></text></g><g><title>little-squid-cli`alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (32 samples, 0.02%)</title><rect x="64.9231%" y="469" width="0.0197%" height="15" fill="rgb(230,69,54)" fg:x="105600" fg:w="32"/><text x="65.1731%" y="479.50"></text></g><g><title>little-squid-cli`core::iter::traits::iterator::Iterator::fold (17 samples, 0.01%)</title><rect x="64.9446%" y="469" width="0.0105%" height="15" fill="rgb(214,135,41)" fg:x="105635" fg:w="17"/><text x="65.1946%" y="479.50"></text></g><g><title>little-squid-cli`&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (35 samples, 0.02%)</title><rect x="64.9864%" y="453" width="0.0215%" height="15" fill="rgb(237,67,25)" fg:x="105703" fg:w="35"/><text x="65.2364%" y="463.50"></text></g><g><title>little-squid-cli`little_squid_cli::fetcher::fetcher::send_blocks (24,339 samples, 14.96%)</title><rect x="51.9434%" y="485" width="14.9637%" height="15" fill="rgb(222,189,50)" fg:x="84488" fg:w="24339"/><text x="52.1934%" y="495.50">little-squid-cli`little..</text></g><g><title>little-squid-cli`utils::utils::sizeof_val (3,155 samples, 1.94%)</title><rect x="64.9674%" y="469" width="1.9397%" height="15" fill="rgb(245,148,34)" fg:x="105672" fg:w="3155"/><text x="65.2174%" y="479.50">l..</text></g><g><title>little-squid-cli`core::iter::traits::iterator::Iterator::fold (3,089 samples, 1.90%)</title><rect x="65.0079%" y="453" width="1.8991%" height="15" fill="rgb(222,29,6)" fg:x="105738" fg:w="3089"/><text x="65.2579%" y="463.50">l..</text></g><g><title>little-squid-cli`core::iter::traits::iterator::Iterator::fold (263 samples, 0.16%)</title><rect x="66.7454%" y="437" width="0.1617%" height="15" fill="rgb(221,189,43)" fg:x="108564" fg:w="263"/><text x="66.9954%" y="447.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (5,160 samples, 3.17%)</title><rect x="66.9550%" y="469" width="3.1724%" height="15" fill="rgb(207,36,27)" fg:x="108905" fg:w="5160"/><text x="67.2050%" y="479.50">lib..</text></g><g><title>libsystem_kernel.dylib`vm_copy (258 samples, 0.16%)</title><rect x="70.1526%" y="373" width="0.1586%" height="15" fill="rgb(217,90,24)" fg:x="114106" fg:w="258"/><text x="70.4026%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (258 samples, 0.16%)</title><rect x="70.1526%" y="357" width="0.1586%" height="15" fill="rgb(224,66,35)" fg:x="114106" fg:w="258"/><text x="70.4026%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (98 samples, 0.06%)</title><rect x="70.3112%" y="373" width="0.0603%" height="15" fill="rgb(221,13,50)" fg:x="114364" fg:w="98"/><text x="70.5612%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`free_large (98 samples, 0.06%)</title><rect x="70.3112%" y="357" width="0.0603%" height="15" fill="rgb(236,68,49)" fg:x="114364" fg:w="98"/><text x="70.5612%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (97 samples, 0.06%)</title><rect x="70.3118%" y="341" width="0.0596%" height="15" fill="rgb(229,146,28)" fg:x="114365" fg:w="97"/><text x="70.5618%" y="351.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (97 samples, 0.06%)</title><rect x="70.3118%" y="325" width="0.0596%" height="15" fill="rgb(225,31,38)" fg:x="114365" fg:w="97"/><text x="70.5618%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (84 samples, 0.05%)</title><rect x="70.3715%" y="373" width="0.0516%" height="15" fill="rgb(250,208,3)" fg:x="114462" fg:w="84"/><text x="70.6215%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`madvise (83 samples, 0.05%)</title><rect x="70.3721%" y="357" width="0.0510%" height="15" fill="rgb(246,54,23)" fg:x="114463" fg:w="83"/><text x="70.6221%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`large_try_realloc_in_place (43 samples, 0.03%)</title><rect x="70.4231%" y="373" width="0.0264%" height="15" fill="rgb(243,76,11)" fg:x="114546" fg:w="43"/><text x="70.6731%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`vm_allocate (43 samples, 0.03%)</title><rect x="70.4231%" y="357" width="0.0264%" height="15" fill="rgb(245,21,50)" fg:x="114546" fg:w="43"/><text x="70.6731%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_allocate_trap (43 samples, 0.03%)</title><rect x="70.4231%" y="341" width="0.0264%" height="15" fill="rgb(228,9,43)" fg:x="114546" fg:w="43"/><text x="70.6731%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (500 samples, 0.31%)</title><rect x="70.1520%" y="389" width="0.3074%" height="15" fill="rgb(208,100,47)" fg:x="114105" fg:w="500"/><text x="70.4020%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (550 samples, 0.34%)</title><rect x="70.1514%" y="405" width="0.3381%" height="15" fill="rgb(232,26,8)" fg:x="114104" fg:w="550"/><text x="70.4014%" y="415.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (49 samples, 0.03%)</title><rect x="70.4594%" y="389" width="0.0301%" height="15" fill="rgb(216,166,38)" fg:x="114605" fg:w="49"/><text x="70.7094%" y="399.50"></text></g><g><title>little-squid-cli`&lt;alloc::vec::Vec&lt;u8&gt; as bytes::buf::buf_mut::BufMut&gt;::put (593 samples, 0.36%)</title><rect x="70.1274%" y="469" width="0.3646%" height="15" fill="rgb(251,202,51)" fg:x="114065" fg:w="593"/><text x="70.3774%" y="479.50"></text></g><g><title>little-squid-cli`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (556 samples, 0.34%)</title><rect x="70.1501%" y="453" width="0.3418%" height="15" fill="rgb(254,216,34)" fg:x="114102" fg:w="556"/><text x="70.4001%" y="463.50"></text></g><g><title>little-squid-cli`alloc::raw_vec::finish_grow (555 samples, 0.34%)</title><rect x="70.1507%" y="437" width="0.3412%" height="15" fill="rgb(251,32,27)" fg:x="114103" fg:w="555"/><text x="70.4007%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`realloc (555 samples, 0.34%)</title><rect x="70.1507%" y="421" width="0.3412%" height="15" fill="rgb(208,127,28)" fg:x="114103" fg:w="555"/><text x="70.4007%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (40 samples, 0.02%)</title><rect x="70.6666%" y="373" width="0.0246%" height="15" fill="rgb(224,137,22)" fg:x="114942" fg:w="40"/><text x="70.9166%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (35 samples, 0.02%)</title><rect x="70.7213%" y="357" width="0.0215%" height="15" fill="rgb(254,70,32)" fg:x="115031" fg:w="35"/><text x="70.9713%" y="367.50"></text></g><g><title>little-squid-cli`futures_channel::mpsc::queue::Queue&lt;T&gt;::pop_spin (46 samples, 0.03%)</title><rect x="70.7158%" y="373" width="0.0283%" height="15" fill="rgb(229,75,37)" fg:x="115022" fg:w="46"/><text x="70.9658%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`__psynch_cvsignal (577 samples, 0.35%)</title><rect x="70.7809%" y="309" width="0.3547%" height="15" fill="rgb(252,64,23)" fg:x="115128" fg:w="577"/><text x="71.0309%" y="319.50"></text></g><g><title>libsystem_kernel.dylib`mach_absolute_time (22 samples, 0.01%)</title><rect x="71.1609%" y="277" width="0.0135%" height="15" fill="rgb(232,162,48)" fg:x="115746" fg:w="22"/><text x="71.4109%" y="287.50"></text></g><g><title>little-squid-cli`parking_lot::condvar::Condvar::notify_one_slow (657 samples, 0.40%)</title><rect x="70.7711%" y="325" width="0.4039%" height="15" fill="rgb(246,160,12)" fg:x="115112" fg:w="657"/><text x="71.0211%" y="335.50"></text></g><g><title>little-squid-cli`std::sys::unix::time::Timespec::now (34 samples, 0.02%)</title><rect x="71.1541%" y="309" width="0.0209%" height="15" fill="rgb(247,166,0)" fg:x="115735" fg:w="34"/><text x="71.4041%" y="319.50"></text></g><g><title>libsystem_c.dylib`clock_gettime (33 samples, 0.02%)</title><rect x="71.1547%" y="293" width="0.0203%" height="15" fill="rgb(249,219,21)" fg:x="115736" fg:w="33"/><text x="71.4047%" y="303.50"></text></g><g><title>libsystem_kernel.dylib`kevent (532 samples, 0.33%)</title><rect x="71.1812%" y="309" width="0.3271%" height="15" fill="rgb(205,209,3)" fg:x="115779" fg:w="532"/><text x="71.4312%" y="319.50"></text></g><g><title>little-squid-cli`tokio::runtime::driver::Handle::unpark (538 samples, 0.33%)</title><rect x="71.1781%" y="325" width="0.3308%" height="15" fill="rgb(243,44,1)" fg:x="115774" fg:w="538"/><text x="71.4281%" y="335.50"></text></g><g><title>little-squid-cli`tokio::runtime::scheduler::multi_thread::park::Unparker::unpark (32 samples, 0.02%)</title><rect x="71.5088%" y="325" width="0.0197%" height="15" fill="rgb(206,159,16)" fg:x="116312" fg:w="32"/><text x="71.7588%" y="335.50"></text></g><g><title>little-squid-cli`tokio::runtime::context::scoped::Scoped&lt;T&gt;::with (1,300 samples, 0.80%)</title><rect x="70.7649%" y="341" width="0.7992%" height="15" fill="rgb(244,77,30)" fg:x="115102" fg:w="1300"/><text x="71.0149%" y="351.50"></text></g><g><title>little-squid-cli`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::schedule_local (58 samples, 0.04%)</title><rect x="71.5285%" y="325" width="0.0357%" height="15" fill="rgb(218,69,12)" fg:x="116344" fg:w="58"/><text x="71.7785%" y="335.50"></text></g><g><title>little-squid-cli`tokio::runtime::scheduler::multi_thread::worker::_&lt;impl tokio::runtime::task::Schedule for alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::handle::Handle&gt;&gt;::schedule (1,329 samples, 0.82%)</title><rect x="70.7551%" y="357" width="0.8171%" height="15" fill="rgb(212,87,7)" fg:x="115086" fg:w="1329"/><text x="71.0051%" y="367.50"></text></g><g><title>little-squid-cli`futures_channel::mpsc::Receiver&lt;T&gt;::next_message (1,566 samples, 0.96%)</title><rect x="70.6149%" y="389" width="0.9628%" height="15" fill="rgb(245,114,25)" fg:x="114858" fg:w="1566"/><text x="70.8649%" y="399.50"></text></g><g><title>little-squid-cli`tokio::runtime::task::waker::wake_by_val (1,344 samples, 0.83%)</title><rect x="70.7514%" y="373" width="0.8263%" height="15" fill="rgb(210,61,42)" fg:x="115080" fg:w="1344"/><text x="71.0014%" y="383.50"></text></g><g><title>little-squid-cli`&lt;futures_channel::mpsc::Receiver&lt;T&gt; as futures_core::stream::Stream&gt;::poll_next (1,644 samples, 1.01%)</title><rect x="70.5836%" y="405" width="1.0107%" height="15" fill="rgb(211,52,33)" fg:x="114807" fg:w="1644"/><text x="70.8336%" y="415.50"></text></g><g><title>little-squid-cli`&lt;hyper::body::body::Body as http_body::Body&gt;::poll_data (1,745 samples, 1.07%)</title><rect x="70.5289%" y="437" width="1.0728%" height="15" fill="rgb(234,58,33)" fg:x="114718" fg:w="1745"/><text x="70.7789%" y="447.50"></text></g><g><title>little-squid-cli`hyper::body::body::Body::poll_inner (1,684 samples, 1.04%)</title><rect x="70.5664%" y="421" width="1.0353%" height="15" fill="rgb(220,115,36)" fg:x="114779" fg:w="1684"/><text x="70.8164%" y="431.50"></text></g><g><title>little-squid-cli`&lt;reqwest::async_impl::body::ImplStream as http_body::Body&gt;::poll_data (1,808 samples, 1.11%)</title><rect x="70.4920%" y="469" width="1.1116%" height="15" fill="rgb(243,153,54)" fg:x="114658" fg:w="1808"/><text x="70.7420%" y="479.50"></text></g><g><title>little-squid-cli`&lt;reqwest::async_impl::body::WrapHyper as http_body::Body&gt;::poll_data (1,758 samples, 1.08%)</title><rect x="70.5227%" y="453" width="1.0808%" height="15" fill="rgb(251,47,18)" fg:x="114708" fg:w="1758"/><text x="70.7727%" y="463.50"></text></g><g><title>little-squid-cli`&lt;reqwest::async_impl::body::WrapHyper as http_body::Body&gt;::poll_data (18 samples, 0.01%)</title><rect x="71.6035%" y="469" width="0.0111%" height="15" fill="rgb(242,102,42)" fg:x="116466" fg:w="18"/><text x="71.8535%" y="479.50"></text></g><g><title>little-squid-cli`bytes::bytes::shared_drop (363 samples, 0.22%)</title><rect x="71.6152%" y="469" width="0.2232%" height="15" fill="rgb(234,31,38)" fg:x="116485" fg:w="363"/><text x="71.8652%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (363 samples, 0.22%)</title><rect x="71.6152%" y="453" width="0.2232%" height="15" fill="rgb(221,117,51)" fg:x="116485" fg:w="363"/><text x="71.8652%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`free_large (352 samples, 0.22%)</title><rect x="71.6220%" y="437" width="0.2164%" height="15" fill="rgb(212,20,18)" fg:x="116496" fg:w="352"/><text x="71.8720%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (352 samples, 0.22%)</title><rect x="71.6220%" y="421" width="0.2164%" height="15" fill="rgb(245,133,36)" fg:x="116496" fg:w="352"/><text x="71.8720%" y="431.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (352 samples, 0.22%)</title><rect x="71.6220%" y="405" width="0.2164%" height="15" fill="rgb(212,6,19)" fg:x="116496" fg:w="352"/><text x="71.8720%" y="415.50"></text></g><g><title>little-squid-cli`bytes::bytes_mut::shared_v_drop (29 samples, 0.02%)</title><rect x="71.8384%" y="469" width="0.0178%" height="15" fill="rgb(218,1,36)" fg:x="116848" fg:w="29"/><text x="72.0884%" y="479.50"></text></g><g><title>little-squid-cli`encoding_rs::Encoding::decode_without_bom_handling (3,378 samples, 2.08%)</title><rect x="71.8568%" y="469" width="2.0768%" height="15" fill="rgb(246,84,54)" fg:x="116878" fg:w="3378"/><text x="72.1068%" y="479.50">l..</text></g><g><title>little-squid-cli`encoding_rs::utf_8::utf8_valid_up_to (3,376 samples, 2.08%)</title><rect x="71.8581%" y="453" width="2.0756%" height="15" fill="rgb(242,110,6)" fg:x="116880" fg:w="3376"/><text x="72.1081%" y="463.50">l..</text></g><g><title>little-squid-cli`reqwest::async_impl::response::Response::text::_{{closure}} (11,417 samples, 7.02%)</title><rect x="66.9150%" y="485" width="7.0192%" height="15" fill="rgb(214,47,5)" fg:x="108840" fg:w="11417"/><text x="67.1650%" y="495.50">little-sq..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (162 samples, 0.10%)</title><rect x="74.3867%" y="453" width="0.0996%" height="15" fill="rgb(218,159,25)" fg:x="120993" fg:w="162"/><text x="74.6367%" y="463.50"></text></g><g><title>little-squid-cli`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (70 samples, 0.04%)</title><rect x="74.4913%" y="453" width="0.0430%" height="15" fill="rgb(215,211,28)" fg:x="121163" fg:w="70"/><text x="74.7413%" y="463.50"></text></g><g><title>little-squid-cli`DYLD-STUB$$memcpy (37 samples, 0.02%)</title><rect x="74.5343%" y="453" width="0.0227%" height="15" fill="rgb(238,59,32)" fg:x="121233" fg:w="37"/><text x="74.7843%" y="463.50"></text></g><g><title>little-squid-cli`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (259 samples, 0.16%)</title><rect x="74.5570%" y="453" width="0.1592%" height="15" fill="rgb(226,82,3)" fg:x="121270" fg:w="259"/><text x="74.8070%" y="463.50"></text></g><g><title>little-squid-cli`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (41 samples, 0.03%)</title><rect x="74.7163%" y="453" width="0.0252%" height="15" fill="rgb(240,164,32)" fg:x="121529" fg:w="41"/><text x="74.9663%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (34 samples, 0.02%)</title><rect x="74.7415%" y="389" width="0.0209%" height="15" fill="rgb(232,46,7)" fg:x="121570" fg:w="34"/><text x="74.9915%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (45 samples, 0.03%)</title><rect x="74.7415%" y="405" width="0.0277%" height="15" fill="rgb(229,129,53)" fg:x="121570" fg:w="45"/><text x="74.9915%" y="415.50"></text></g><g><title>little-squid-cli`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (46 samples, 0.03%)</title><rect x="74.7415%" y="453" width="0.0283%" height="15" fill="rgb(234,188,29)" fg:x="121570" fg:w="46"/><text x="74.9915%" y="463.50"></text></g><g><title>little-squid-cli`alloc::raw_vec::finish_grow (46 samples, 0.03%)</title><rect x="74.7415%" y="437" width="0.0283%" height="15" fill="rgb(246,141,4)" fg:x="121570" fg:w="46"/><text x="74.9915%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`realloc (46 samples, 0.03%)</title><rect x="74.7415%" y="421" width="0.0283%" height="15" fill="rgb(229,23,39)" fg:x="121570" fg:w="46"/><text x="74.9915%" y="431.50"></text></g><g><title>little-squid-cli`serde::de::impls::_&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (45 samples, 0.03%)</title><rect x="74.7698%" y="453" width="0.0277%" height="15" fill="rgb(206,12,3)" fg:x="121616" fg:w="45"/><text x="75.0198%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (357 samples, 0.22%)</title><rect x="75.7528%" y="437" width="0.2195%" height="15" fill="rgb(252,226,20)" fg:x="123215" fg:w="357"/><text x="76.0028%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (600 samples, 0.37%)</title><rect x="75.9760%" y="437" width="0.3689%" height="15" fill="rgb(216,123,35)" fg:x="123578" fg:w="600"/><text x="76.2260%" y="447.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (84 samples, 0.05%)</title><rect x="76.3449%" y="437" width="0.0516%" height="15" fill="rgb(212,68,40)" fg:x="124178" fg:w="84"/><text x="76.5949%" y="447.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (324 samples, 0.20%)</title><rect x="76.3965%" y="437" width="0.1992%" height="15" fill="rgb(254,125,32)" fg:x="124262" fg:w="324"/><text x="76.6465%" y="447.50"></text></g><g><title>little-squid-cli`&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (161 samples, 0.10%)</title><rect x="76.5957%" y="437" width="0.0990%" height="15" fill="rgb(253,97,22)" fg:x="124586" fg:w="161"/><text x="76.8457%" y="447.50"></text></g><g><title>little-squid-cli`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (542 samples, 0.33%)</title><rect x="76.6947%" y="437" width="0.3332%" height="15" fill="rgb(241,101,14)" fg:x="124747" fg:w="542"/><text x="76.9447%" y="447.50"></text></g><g><title>little-squid-cli`DYLD-STUB$$malloc (60 samples, 0.04%)</title><rect x="77.0279%" y="437" width="0.0369%" height="15" fill="rgb(238,103,29)" fg:x="125289" fg:w="60"/><text x="77.2779%" y="447.50"></text></g><g><title>little-squid-cli`DYLD-STUB$$memcmp (30 samples, 0.02%)</title><rect x="77.0648%" y="437" width="0.0184%" height="15" fill="rgb(233,195,47)" fg:x="125349" fg:w="30"/><text x="77.3148%" y="447.50"></text></g><g><title>little-squid-cli`DYLD-STUB$$memcpy (36 samples, 0.02%)</title><rect x="77.0833%" y="437" width="0.0221%" height="15" fill="rgb(246,218,30)" fg:x="125379" fg:w="36"/><text x="77.3333%" y="447.50"></text></g><g><title>little-squid-cli`__rdl_alloc (56 samples, 0.03%)</title><rect x="77.1054%" y="437" width="0.0344%" height="15" fill="rgb(219,145,47)" fg:x="125415" fg:w="56"/><text x="77.3554%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (128 samples, 0.08%)</title><rect x="77.6384%" y="421" width="0.0787%" height="15" fill="rgb(243,12,26)" fg:x="126282" fg:w="128"/><text x="77.8884%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (48 samples, 0.03%)</title><rect x="77.7171%" y="421" width="0.0295%" height="15" fill="rgb(214,87,16)" fg:x="126410" fg:w="48"/><text x="77.9671%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (21 samples, 0.01%)</title><rect x="77.7466%" y="421" width="0.0129%" height="15" fill="rgb(208,99,42)" fg:x="126458" fg:w="21"/><text x="77.9966%" y="431.50"></text></g><g><title>little-squid-cli`DYLD-STUB$$malloc (21 samples, 0.01%)</title><rect x="77.7595%" y="421" width="0.0129%" height="15" fill="rgb(253,99,2)" fg:x="126479" fg:w="21"/><text x="78.0095%" y="431.50"></text></g><g><title>little-squid-cli`__rdl_alloc (57 samples, 0.04%)</title><rect x="77.7724%" y="421" width="0.0350%" height="15" fill="rgb(220,168,23)" fg:x="126500" fg:w="57"/><text x="78.0224%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (91 samples, 0.06%)</title><rect x="79.1785%" y="389" width="0.0559%" height="15" fill="rgb(242,38,24)" fg:x="128787" fg:w="91"/><text x="79.4285%" y="399.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (254 samples, 0.16%)</title><rect x="79.5523%" y="373" width="0.1562%" height="15" fill="rgb(225,182,9)" fg:x="129395" fg:w="254"/><text x="79.8023%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wake (148 samples, 0.09%)</title><rect x="79.7085%" y="373" width="0.0910%" height="15" fill="rgb(243,178,37)" fg:x="129649" fg:w="148"/><text x="79.9585%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages (29 samples, 0.02%)</title><rect x="79.8068%" y="373" width="0.0178%" height="15" fill="rgb(232,139,19)" fg:x="129809" fg:w="29"/><text x="80.0568%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (28 samples, 0.02%)</title><rect x="79.8074%" y="357" width="0.0172%" height="15" fill="rgb(225,201,24)" fg:x="129810" fg:w="28"/><text x="80.0574%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (350 samples, 0.22%)</title><rect x="79.8247%" y="373" width="0.2152%" height="15" fill="rgb(221,47,46)" fg:x="129838" fg:w="350"/><text x="80.0747%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (59 samples, 0.04%)</title><rect x="81.0801%" y="357" width="0.0363%" height="15" fill="rgb(249,23,13)" fg:x="131880" fg:w="59"/><text x="81.3301%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1,735 samples, 1.07%)</title><rect x="80.0546%" y="373" width="1.0667%" height="15" fill="rgb(219,9,5)" fg:x="130212" fg:w="1735"/><text x="80.3046%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3,143 samples, 1.93%)</title><rect x="79.2344%" y="389" width="1.9323%" height="15" fill="rgb(254,171,16)" fg:x="128878" fg:w="3143"/><text x="79.4844%" y="399.50">l..</text></g><g><title>libsystem_platform.dylib`_os_unfair_lock_lock_slow (74 samples, 0.05%)</title><rect x="81.1213%" y="373" width="0.0455%" height="15" fill="rgb(230,171,20)" fg:x="131947" fg:w="74"/><text x="81.3713%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3,365 samples, 2.07%)</title><rect x="79.1176%" y="405" width="2.0688%" height="15" fill="rgb(210,71,41)" fg:x="128688" fg:w="3365"/><text x="79.3676%" y="415.50">l..</text></g><g><title>libsystem_platform.dylib`os_unfair_lock_lock_with_options (28 samples, 0.02%)</title><rect x="81.1692%" y="389" width="0.0172%" height="15" fill="rgb(206,173,20)" fg:x="132025" fg:w="28"/><text x="81.4192%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (53 samples, 0.03%)</title><rect x="81.1864%" y="405" width="0.0326%" height="15" fill="rgb(233,88,34)" fg:x="132053" fg:w="53"/><text x="81.4364%" y="415.50"></text></g><g><title>little-squid-cli`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (5,842 samples, 3.59%)</title><rect x="77.8075%" y="421" width="3.5917%" height="15" fill="rgb(223,209,46)" fg:x="126557" fg:w="5842"/><text x="78.0575%" y="431.50">litt..</text></g><g><title>little-squid-cli`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (293 samples, 0.18%)</title><rect x="81.2190%" y="405" width="0.1801%" height="15" fill="rgb(250,43,18)" fg:x="132106" fg:w="293"/><text x="81.4690%" y="415.50"></text></g><g><title>little-squid-cli`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (7,060 samples, 4.34%)</title><rect x="77.1404%" y="437" width="4.3405%" height="15" fill="rgb(208,13,10)" fg:x="125472" fg:w="7060"/><text x="77.3904%" y="447.50">littl..</text></g><g><title>little-squid-cli`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (133 samples, 0.08%)</title><rect x="81.3992%" y="421" width="0.0818%" height="15" fill="rgb(212,200,36)" fg:x="132399" fg:w="133"/><text x="81.6492%" y="431.50"></text></g><g><title>little-squid-cli`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (144 samples, 0.09%)</title><rect x="81.4809%" y="437" width="0.0885%" height="15" fill="rgb(225,90,30)" fg:x="132532" fg:w="144"/><text x="81.7309%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (138 samples, 0.08%)</title><rect x="81.6383%" y="421" width="0.0848%" height="15" fill="rgb(236,182,39)" fg:x="132788" fg:w="138"/><text x="81.8883%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (34 samples, 0.02%)</title><rect x="81.7023%" y="405" width="0.0209%" height="15" fill="rgb(212,144,35)" fg:x="132892" fg:w="34"/><text x="81.9523%" y="415.50"></text></g><g><title>little-squid-cli`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (251 samples, 0.15%)</title><rect x="81.5695%" y="437" width="0.1543%" height="15" fill="rgb(228,63,44)" fg:x="132676" fg:w="251"/><text x="81.8195%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (120 samples, 0.07%)</title><rect x="81.8252%" y="421" width="0.0738%" height="15" fill="rgb(228,109,6)" fg:x="133092" fg:w="120"/><text x="82.0752%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (23 samples, 0.01%)</title><rect x="81.8849%" y="405" width="0.0141%" height="15" fill="rgb(238,117,24)" fg:x="133189" fg:w="23"/><text x="82.1349%" y="415.50"></text></g><g><title>little-squid-cli`serde::de::impls::_&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (706 samples, 0.43%)</title><rect x="81.7238%" y="437" width="0.4341%" height="15" fill="rgb(242,26,26)" fg:x="132927" fg:w="706"/><text x="81.9738%" y="447.50"></text></g><g><title>little-squid-cli`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (421 samples, 0.26%)</title><rect x="81.8990%" y="421" width="0.2588%" height="15" fill="rgb(221,92,48)" fg:x="133212" fg:w="421"/><text x="82.1490%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (865 samples, 0.53%)</title><rect x="83.8707%" y="421" width="0.5318%" height="15" fill="rgb(209,209,32)" fg:x="136419" fg:w="865"/><text x="84.1207%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1,381 samples, 0.85%)</title><rect x="84.4074%" y="421" width="0.8490%" height="15" fill="rgb(221,70,22)" fg:x="137292" fg:w="1381"/><text x="84.6574%" y="431.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (306 samples, 0.19%)</title><rect x="85.2564%" y="421" width="0.1881%" height="15" fill="rgb(248,145,5)" fg:x="138673" fg:w="306"/><text x="85.5064%" y="431.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (505 samples, 0.31%)</title><rect x="85.4446%" y="421" width="0.3105%" height="15" fill="rgb(226,116,26)" fg:x="138979" fg:w="505"/><text x="85.6946%" y="431.50"></text></g><g><title>little-squid-cli`&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (148 samples, 0.09%)</title><rect x="85.7550%" y="421" width="0.0910%" height="15" fill="rgb(244,5,17)" fg:x="139484" fg:w="148"/><text x="86.0050%" y="431.50"></text></g><g><title>little-squid-cli`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (693 samples, 0.43%)</title><rect x="85.8460%" y="421" width="0.4261%" height="15" fill="rgb(252,159,33)" fg:x="139632" fg:w="693"/><text x="86.0960%" y="431.50"></text></g><g><title>little-squid-cli`DYLD-STUB$$malloc (123 samples, 0.08%)</title><rect x="86.2721%" y="421" width="0.0756%" height="15" fill="rgb(206,71,0)" fg:x="140325" fg:w="123"/><text x="86.5221%" y="431.50"></text></g><g><title>little-squid-cli`DYLD-STUB$$memcmp (163 samples, 0.10%)</title><rect x="86.3477%" y="421" width="0.1002%" height="15" fill="rgb(233,118,54)" fg:x="140448" fg:w="163"/><text x="86.5977%" y="431.50"></text></g><g><title>little-squid-cli`DYLD-STUB$$memcpy (75 samples, 0.05%)</title><rect x="86.4479%" y="421" width="0.0461%" height="15" fill="rgb(234,83,48)" fg:x="140611" fg:w="75"/><text x="86.6979%" y="431.50"></text></g><g><title>little-squid-cli`__rdl_alloc (206 samples, 0.13%)</title><rect x="86.4940%" y="421" width="0.1266%" height="15" fill="rgb(228,3,54)" fg:x="140686" fg:w="206"/><text x="86.7440%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (155 samples, 0.10%)</title><rect x="87.5755%" y="405" width="0.0953%" height="15" fill="rgb(226,155,13)" fg:x="142445" fg:w="155"/><text x="87.8255%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (58 samples, 0.04%)</title><rect x="87.6714%" y="405" width="0.0357%" height="15" fill="rgb(241,28,37)" fg:x="142601" fg:w="58"/><text x="87.9214%" y="415.50"></text></g><g><title>little-squid-cli`DYLD-STUB$$malloc (35 samples, 0.02%)</title><rect x="87.7144%" y="405" width="0.0215%" height="15" fill="rgb(233,93,10)" fg:x="142671" fg:w="35"/><text x="87.9644%" y="415.50"></text></g><g><title>little-squid-cli`__rdl_alloc (32 samples, 0.02%)</title><rect x="87.7359%" y="405" width="0.0197%" height="15" fill="rgb(225,113,19)" fg:x="142706" fg:w="32"/><text x="87.9859%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (79 samples, 0.05%)</title><rect x="89.1856%" y="373" width="0.0486%" height="15" fill="rgb(241,2,18)" fg:x="145064" fg:w="79"/><text x="89.4356%" y="383.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wait (236 samples, 0.15%)</title><rect x="89.5195%" y="357" width="0.1451%" height="15" fill="rgb(228,207,21)" fg:x="145607" fg:w="236"/><text x="89.7695%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`__ulock_wake (120 samples, 0.07%)</title><rect x="89.6646%" y="357" width="0.0738%" height="15" fill="rgb(213,211,35)" fg:x="145843" fg:w="120"/><text x="89.9146%" y="367.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_map_trap (37 samples, 0.02%)</title><rect x="89.7463%" y="341" width="0.0227%" height="15" fill="rgb(209,83,10)" fg:x="145976" fg:w="37"/><text x="89.9963%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`mvm_allocate_pages (38 samples, 0.02%)</title><rect x="89.7463%" y="357" width="0.0234%" height="15" fill="rgb(209,164,1)" fg:x="145976" fg:w="38"/><text x="89.9963%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (364 samples, 0.22%)</title><rect x="89.7697%" y="357" width="0.2238%" height="15" fill="rgb(213,184,43)" fg:x="146014" fg:w="364"/><text x="90.0197%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_tiny_check_and_zero_inline_meta_from_freelist (71 samples, 0.04%)</title><rect x="91.0061%" y="341" width="0.0437%" height="15" fill="rgb(231,61,34)" fg:x="148025" fg:w="71"/><text x="91.2561%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1,699 samples, 1.04%)</title><rect x="90.0070%" y="357" width="1.0445%" height="15" fill="rgb(235,75,3)" fg:x="146400" fg:w="1699"/><text x="90.2570%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_os_unfair_lock_lock_slow (69 samples, 0.04%)</title><rect x="91.0516%" y="357" width="0.0424%" height="15" fill="rgb(220,106,47)" fg:x="148099" fg:w="69"/><text x="91.3016%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3,027 samples, 1.86%)</title><rect x="89.2342%" y="373" width="1.8610%" height="15" fill="rgb(210,196,33)" fg:x="145143" fg:w="3027"/><text x="89.4842%" y="383.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3,255 samples, 2.00%)</title><rect x="89.1168%" y="389" width="2.0012%" height="15" fill="rgb(229,154,42)" fg:x="144952" fg:w="3255"/><text x="89.3668%" y="399.50">l..</text></g><g><title>libsystem_platform.dylib`os_unfair_lock_lock_with_options (37 samples, 0.02%)</title><rect x="91.0952%" y="373" width="0.0227%" height="15" fill="rgb(228,114,26)" fg:x="148170" fg:w="37"/><text x="91.3452%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (65 samples, 0.04%)</title><rect x="91.1180%" y="389" width="0.0400%" height="15" fill="rgb(208,144,1)" fg:x="148207" fg:w="65"/><text x="91.3680%" y="399.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (515 samples, 0.32%)</title><rect x="91.1579%" y="389" width="0.3166%" height="15" fill="rgb(239,112,37)" fg:x="148272" fg:w="515"/><text x="91.4079%" y="399.50"></text></g><g><title>little-squid-cli`DYLD-STUB$$memmove (137 samples, 0.08%)</title><rect x="91.4745%" y="389" width="0.0842%" height="15" fill="rgb(210,96,50)" fg:x="148787" fg:w="137"/><text x="91.7245%" y="399.50"></text></g><g><title>little-squid-cli`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (6,587 samples, 4.05%)</title><rect x="87.7556%" y="405" width="4.0497%" height="15" fill="rgb(222,178,2)" fg:x="142738" fg:w="6587"/><text x="88.0056%" y="415.50">litt..</text></g><g><title>little-squid-cli`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (401 samples, 0.25%)</title><rect x="91.5588%" y="389" width="0.2465%" height="15" fill="rgb(226,74,18)" fg:x="148924" fg:w="401"/><text x="91.8088%" y="399.50"></text></g><g><title>little-squid-cli`alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (8,676 samples, 5.33%)</title><rect x="86.6213%" y="421" width="5.3340%" height="15" fill="rgb(225,67,54)" fg:x="140893" fg:w="8676"/><text x="86.8713%" y="431.50">little-..</text></g><g><title>little-squid-cli`alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (244 samples, 0.15%)</title><rect x="91.8053%" y="405" width="0.1500%" height="15" fill="rgb(251,92,32)" fg:x="149325" fg:w="244"/><text x="92.0553%" y="415.50"></text></g><g><title>little-squid-cli`alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (201 samples, 0.12%)</title><rect x="91.9553%" y="421" width="0.1236%" height="15" fill="rgb(228,149,22)" fg:x="149569" fg:w="201"/><text x="92.2053%" y="431.50"></text></g><g><title>little-squid-cli`alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (159 samples, 0.10%)</title><rect x="92.0789%" y="421" width="0.0978%" height="15" fill="rgb(243,54,13)" fg:x="149770" fg:w="159"/><text x="92.3289%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (126 samples, 0.08%)</title><rect x="92.0992%" y="405" width="0.0775%" height="15" fill="rgb(243,180,28)" fg:x="149803" fg:w="126"/><text x="92.3492%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (37 samples, 0.02%)</title><rect x="92.1539%" y="389" width="0.0227%" height="15" fill="rgb(208,167,24)" fg:x="149892" fg:w="37"/><text x="92.4039%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (295 samples, 0.18%)</title><rect x="92.2805%" y="405" width="0.1814%" height="15" fill="rgb(245,73,45)" fg:x="150098" fg:w="295"/><text x="92.5305%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (73 samples, 0.04%)</title><rect x="92.4170%" y="389" width="0.0449%" height="15" fill="rgb(237,203,48)" fg:x="150320" fg:w="73"/><text x="92.6670%" y="399.50"></text></g><g><title>little-squid-cli`serde::de::impls::_&lt;impl serde::de::Deserialize for alloc::string::String&gt;::deserialize (1,491 samples, 0.92%)</title><rect x="92.1766%" y="421" width="0.9167%" height="15" fill="rgb(211,197,16)" fg:x="149929" fg:w="1491"/><text x="92.4266%" y="431.50"></text></g><g><title>little-squid-cli`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (1,027 samples, 0.63%)</title><rect x="92.4619%" y="405" width="0.6314%" height="15" fill="rgb(243,99,51)" fg:x="150393" fg:w="1027"/><text x="92.7119%" y="415.50"></text></g><g><title>little-squid-cli`serde_json::de::Deserializer&lt;R&gt;::parse_integer (46 samples, 0.03%)</title><rect x="93.0933%" y="421" width="0.0283%" height="15" fill="rgb(215,123,29)" fg:x="151420" fg:w="46"/><text x="93.3433%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1,517 samples, 0.93%)</title><rect x="93.6528%" y="405" width="0.9327%" height="15" fill="rgb(239,186,37)" fg:x="152330" fg:w="1517"/><text x="93.9028%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_find_block_and_allocate (574 samples, 0.35%)</title><rect x="94.2325%" y="389" width="0.3529%" height="15" fill="rgb(252,136,39)" fg:x="153273" fg:w="574"/><text x="94.4825%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_from_block (30 samples, 0.02%)</title><rect x="94.5670%" y="373" width="0.0184%" height="15" fill="rgb(223,213,32)" fg:x="153817" fg:w="30"/><text x="94.8170%" y="383.50"></text></g><g><title>little-squid-cli`&lt;serde_json::read::StrRead as serde_json::read::Read&gt;::parse_str (8,008 samples, 4.92%)</title><rect x="94.5861%" y="405" width="4.9233%" height="15" fill="rgb(233,115,5)" fg:x="153848" fg:w="8008"/><text x="94.8361%" y="415.50">little..</text></g><g><title>little-squid-cli`serde_json::de::from_str (42,123 samples, 25.90%)</title><rect x="73.9342%" y="485" width="25.8973%" height="15" fill="rgb(207,226,44)" fg:x="120257" fg:w="42123"/><text x="74.1842%" y="495.50">little-squid-cli`serde_json::de::from_str</text></g><g><title>little-squid-cli`serde_json::value::de::_&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (42,123 samples, 25.90%)</title><rect x="73.9342%" y="469" width="25.8973%" height="15" fill="rgb(208,126,0)" fg:x="120257" fg:w="42123"/><text x="74.1842%" y="479.50">little-squid-cli`serde_json::value::de::_..</text></g><g><title>little-squid-cli`serde_json::value::de::_&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (40,719 samples, 25.03%)</title><rect x="74.7974%" y="453" width="25.0341%" height="15" fill="rgb(244,66,21)" fg:x="121661" fg:w="40719"/><text x="75.0474%" y="463.50">little-squid-cli`serde_json::value::de::..</text></g><g><title>little-squid-cli`serde_json::value::de::_&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (28,747 samples, 17.67%)</title><rect x="82.1578%" y="437" width="17.6737%" height="15" fill="rgb(222,97,12)" fg:x="133633" fg:w="28747"/><text x="82.4078%" y="447.50">little-squid-cli`serde_json..</text></g><g><title>little-squid-cli`serde_json::value::de::_&lt;impl serde::de::Deserialize for serde_json::value::Value&gt;::deserialize (10,914 samples, 6.71%)</title><rect x="93.1216%" y="421" width="6.7099%" height="15" fill="rgb(219,213,19)" fg:x="151466" fg:w="10914"/><text x="93.3716%" y="431.50">little-sq..</text></g><g><title>little-squid-cli`serde_json::de::Deserializer&lt;R&gt;::parse_integer (524 samples, 0.32%)</title><rect x="99.5094%" y="405" width="0.3222%" height="15" fill="rgb(252,169,30)" fg:x="161856" fg:w="524"/><text x="99.7594%" y="415.50"></text></g><g><title>little-squid-cli`std::io::stdio::_print (17 samples, 0.01%)</title><rect x="99.8315%" y="485" width="0.0105%" height="15" fill="rgb(206,32,51)" fg:x="162380" fg:w="17"/><text x="100.0815%" y="495.50"></text></g><g><title>little-squid-cli`&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (17 samples, 0.01%)</title><rect x="99.8315%" y="469" width="0.0105%" height="15" fill="rgb(250,172,42)" fg:x="162380" fg:w="17"/><text x="100.0815%" y="479.50"></text></g><g><title>little-squid-cli`little_squid_cli::fetcher::fetcher::fetch::_{{closure}}::_{{closure}}::_{{closure}} (117,323 samples, 72.13%)</title><rect x="27.7491%" y="501" width="72.1304%" height="15" fill="rgb(209,34,43)" fg:x="45135" fg:w="117323"/><text x="27.9991%" y="511.50">little-squid-cli`little_squid_cli::fetcher::fetcher::fetch::_{{closure}}::_{{closure}}::_{{closure}}</text></g><g><title>little-squid-cli`utils::utils::sizeof_val (60 samples, 0.04%)</title><rect x="99.8426%" y="485" width="0.0369%" height="15" fill="rgb(223,11,35)" fg:x="162398" fg:w="60"/><text x="100.0926%" y="495.50"></text></g><g><title>little-squid-cli`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (144,961 samples, 89.12%)</title><rect x="10.7750%" y="517" width="89.1223%" height="15" fill="rgb(251,219,26)" fg:x="17526" fg:w="144961"/><text x="11.0250%" y="527.50">little-squid-cli`tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>little-squid-cli`tokio::runtime::task::core::TaskIdGuard::enter (19 samples, 0.01%)</title><rect x="99.8856%" y="501" width="0.0117%" height="15" fill="rgb(231,119,3)" fg:x="162468" fg:w="19"/><text x="100.1356%" y="511.50"></text></g><g><title>little-squid-cli`tokio::runtime::task::state::State::transition_to_idle (19 samples, 0.01%)</title><rect x="99.9029%" y="517" width="0.0117%" height="15" fill="rgb(216,97,11)" fg:x="162496" fg:w="19"/><text x="100.1529%" y="527.50"></text></g><g><title>little-squid-cli`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (145,090 samples, 89.20%)</title><rect x="10.7246%" y="533" width="89.2016%" height="15" fill="rgb(223,59,9)" fg:x="17444" fg:w="145090"/><text x="10.9746%" y="543.50">little-squid-cli`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>little-squid-cli`tokio::runtime::task::state::State::transition_to_running (19 samples, 0.01%)</title><rect x="99.9145%" y="517" width="0.0117%" height="15" fill="rgb(233,93,31)" fg:x="162515" fg:w="19"/><text x="100.1645%" y="527.50"></text></g><g><title>little-squid-cli`tokio::runtime::scheduler::multi_thread::worker::Context::run_task (145,704 samples, 89.58%)</title><rect x="10.3508%" y="549" width="89.5791%" height="15" fill="rgb(239,81,33)" fg:x="16836" fg:w="145704"/><text x="10.6008%" y="559.50">little-squid-cli`tokio::runtime::scheduler::multi_thread::worker::Context::run_task</text></g><g><title>little-squid-cli`tokio::runtime::scheduler::multi_thread::worker::Context::run (151,408 samples, 93.09%)</title><rect x="6.8600%" y="565" width="93.0859%" height="15" fill="rgb(213,120,34)" fg:x="11158" fg:w="151408"/><text x="7.1100%" y="575.50">little-squid-cli`tokio::runtime::scheduler::multi_thread::worker::Context::run</text></g><g><title>libsystem_pthread.dylib`thread_start (162,538 samples, 99.93%)</title><rect x="0.0184%" y="757" width="99.9287%" height="15" fill="rgb(243,49,53)" fg:x="30" fg:w="162538"/><text x="0.2684%" y="767.50">libsystem_pthread.dylib`thread_start</text></g><g><title>libsystem_pthread.dylib`_pthread_start (162,538 samples, 99.93%)</title><rect x="0.0184%" y="741" width="99.9287%" height="15" fill="rgb(247,216,33)" fg:x="30" fg:w="162538"/><text x="0.2684%" y="751.50">libsystem_pthread.dylib`_pthread_start</text></g><g><title>little-squid-cli`std::sys::unix::thread::Thread::new::thread_start (162,538 samples, 99.93%)</title><rect x="0.0184%" y="725" width="99.9287%" height="15" fill="rgb(226,26,14)" fg:x="30" fg:w="162538"/><text x="0.2684%" y="735.50">little-squid-cli`std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>little-squid-cli`core::ops::function::FnOnce::call_once{{vtable.shim}} (162,538 samples, 99.93%)</title><rect x="0.0184%" y="709" width="99.9287%" height="15" fill="rgb(215,49,53)" fg:x="30" fg:w="162538"/><text x="0.2684%" y="719.50">little-squid-cli`core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>little-squid-cli`std::sys_common::backtrace::__rust_begin_short_backtrace (162,538 samples, 99.93%)</title><rect x="0.0184%" y="693" width="99.9287%" height="15" fill="rgb(245,162,40)" fg:x="30" fg:w="162538"/><text x="0.2684%" y="703.50">little-squid-cli`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>little-squid-cli`tokio::runtime::blocking::pool::Inner::run (151,537 samples, 93.17%)</title><rect x="6.7819%" y="677" width="93.1652%" height="15" fill="rgb(229,68,17)" fg:x="11031" fg:w="151537"/><text x="7.0319%" y="687.50">little-squid-cli`tokio::runtime::blocking::pool::Inner::run</text></g><g><title>little-squid-cli`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (151,533 samples, 93.16%)</title><rect x="6.7843%" y="661" width="93.1628%" height="15" fill="rgb(213,182,10)" fg:x="11035" fg:w="151533"/><text x="7.0343%" y="671.50">little-squid-cli`tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll</text></g><g><title>little-squid-cli`tokio::runtime::task::core::Core&lt;T,S&gt;::poll (151,436 samples, 93.10%)</title><rect x="6.8440%" y="645" width="93.1032%" height="15" fill="rgb(245,125,30)" fg:x="11132" fg:w="151436"/><text x="7.0940%" y="655.50">little-squid-cli`tokio::runtime::task::core::Core&lt;T,S&gt;::poll</text></g><g><title>little-squid-cli`&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (151,436 samples, 93.10%)</title><rect x="6.8440%" y="629" width="93.1032%" height="15" fill="rgb(232,202,2)" fg:x="11132" fg:w="151436"/><text x="7.0940%" y="639.50">little-squid-cli`&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll</text></g><g><title>little-squid-cli`tokio::runtime::scheduler::multi_thread::worker::run (151,436 samples, 93.10%)</title><rect x="6.8440%" y="613" width="93.1032%" height="15" fill="rgb(237,140,51)" fg:x="11132" fg:w="151436"/><text x="7.0940%" y="623.50">little-squid-cli`tokio::runtime::scheduler::multi_thread::worker::run</text></g><g><title>little-squid-cli`tokio::runtime::context::runtime::enter_runtime (151,436 samples, 93.10%)</title><rect x="6.8440%" y="597" width="93.1032%" height="15" fill="rgb(236,157,25)" fg:x="11132" fg:w="151436"/><text x="7.0940%" y="607.50">little-squid-cli`tokio::runtime::context::runtime::enter_runtime</text></g><g><title>little-squid-cli`tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (151,436 samples, 93.10%)</title><rect x="6.8440%" y="581" width="93.1032%" height="15" fill="rgb(219,209,0)" fg:x="11132" fg:w="151436"/><text x="7.0940%" y="591.50">little-squid-cli`tokio::runtime::context::scoped::Scoped&lt;T&gt;::set</text></g><g><title>little-squid-cli`encoding_rs::utf_8::utf8_valid_up_to (48 samples, 0.03%)</title><rect x="99.9471%" y="757" width="0.0295%" height="15" fill="rgb(240,116,54)" fg:x="162568" fg:w="48"/><text x="100.1971%" y="767.50"></text></g><g><title>all (162,654 samples, 100%)</title><rect x="0.0000%" y="773" width="100.0000%" height="15" fill="rgb(216,10,36)" fg:x="0" fg:w="162654"/><text x="0.2500%" y="783.50"></text></g><g><title>little-squid-cli`little_squid_cli::fetcher::fetcher::fetch::_{{closure}}::_{{closure}}::_{{closure}} (38 samples, 0.02%)</title><rect x="99.9766%" y="757" width="0.0234%" height="15" fill="rgb(222,72,44)" fg:x="162616" fg:w="38"/><text x="100.2266%" y="767.50"></text></g><g><title>little-squid-cli`reqwest::async_impl::response::Response::text::_{{closure}} (37 samples, 0.02%)</title><rect x="99.9773%" y="741" width="0.0227%" height="15" fill="rgb(232,159,9)" fg:x="162617" fg:w="37"/><text x="100.2273%" y="751.50"></text></g><g><title>little-squid-cli`encoding_rs::Encoding::decode_without_bom_handling (37 samples, 0.02%)</title><rect x="99.9773%" y="725" width="0.0227%" height="15" fill="rgb(210,39,32)" fg:x="162617" fg:w="37"/><text x="100.2273%" y="735.50"></text></g><g><title>little-squid-cli`encoding_rs::utf_8::utf8_valid_up_to (37 samples, 0.02%)</title><rect x="99.9773%" y="709" width="0.0227%" height="15" fill="rgb(216,194,45)" fg:x="162617" fg:w="37"/><text x="100.2273%" y="719.50"></text></g></svg></svg>